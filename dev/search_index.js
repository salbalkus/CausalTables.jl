var documenterSearchIndex = {"docs":
[{"location":"man/network-summaries/#Network-Summaries","page":"Network summaries","title":"Network Summaries","text":"","category":"section"},{"location":"man/network-summaries/","page":"Network summaries","title":"Network summaries","text":"In network causal inference, methods often rely on summarizing the treatment and covariates of each unit's neighbors using some sort of summary function. For example, in a study evaluating the effect of electric vehicle adoption on air pollution, one might model the commuting patterns between counties as a network and evaluate the effect of the sum the number of electric vehicles commuting into each county. More information on when one might want to construct a CausalTable that features summary functions is featured in Turning Your Data Into a CausalTable.","category":"page"},{"location":"man/network-summaries/","page":"Network summaries","title":"Network summaries","text":"This section documents all available summary measures and how to summarize them within a CausalTable. ","category":"page"},{"location":"man/network-summaries/#Summarizing-a-CausalTable","page":"Network summaries","title":"Summarizing a CausalTable","text":"","category":"section"},{"location":"man/network-summaries/","page":"Network summaries","title":"Network summaries","text":"Data wrapped in a CausalTable includes a NamedTuple summaries which describes extra variables represented as summary variables over the network. These summary measures can be computed and added to the table by calling the summarize function on the CausalTable object.","category":"page"},{"location":"man/network-summaries/#CausalTables.summarize-man-network-summaries","page":"Network summaries","title":"CausalTables.summarize","text":"summarize(o::CausalTable)\n\nSummarizes the data in a CausalTable object according to the NetworkSummary objects stored in its summaries attribute.\n\nArguments\n\no::CausalTable: The CausalTable object to be summarized.\n\nReturns\n\nA new CausalTable object with the original data merged with the summarized data.\n\n\n\n\n\n","category":"function"},{"location":"man/network-summaries/#Existing-Summary-Measures","page":"Network summaries","title":"Existing Summary Measures","text":"","category":"section"},{"location":"man/network-summaries/","page":"Network summaries","title":"Network summaries","text":"The following lists summary measures currently available off-the-shelf in CausalTables.jl. Examples on their use are provided in Generating Data for Statistical Experiments and Turning data into a CausalTable.","category":"page"},{"location":"man/network-summaries/#CausalTables.Sum-man-network-summaries","page":"Network summaries","title":"CausalTables.Sum","text":"Sum <: NetworkSummary\n\nA NetworkSummary which sums the values of the target variable for each unit connected in the adjacency matrix of a StructuralCausalModel or CausalTable\n\nFields\n\ntarget::Symbol: A key denoting the target variable to be summarized in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the target variable to be summarized in the data attribute of a CausalTable.\nmatrix::Symbol: A key denoting the adjacency matrix over which summary is computed in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the key of the adjacency matrix in the arrays attribute of a CausalTable.\nweights::Union{Symbol, Nothing}: An optional variable by which each unit may be weighted in the summary.\n\n\n\n\n\n","category":"type"},{"location":"man/network-summaries/#CausalTables.Mean-man-network-summaries","page":"Network summaries","title":"CausalTables.Mean","text":"Mean <: NetworkSummary\n\nA NetworkSummary which computes the mean of the target variable among each unit connected in the adjacency matrix.\n\nFields\n\ntarget::Symbol: A key denoting the target variable to be summarized in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the target variable to be summarized in the data attribute of a CausalTable.\nmatrix::Symbol: A key denoting the adjacency matrix over which summary is computed in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the key of the adjacency matrix in the arrays attribute of a CausalTable.\nweights::Union{Symbol, Nothing}: An optional variable by which each unit may be weighted in the summary.\n\n\n\n\n\n","category":"type"},{"location":"man/network-summaries/#CausalTables.AllOrderStatistics-man-network-summaries","page":"Network summaries","title":"CausalTables.AllOrderStatistics","text":"AllOrderStatistics <: NetworkSummary\n\nA NetworkSummary which computes all ordered values of the target variable among each unit's connected neighbors in the adjacency matrix.\n\nFields\n\ntarget::Symbol: A key denoting the target variable to be summarized in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the target variable to be summarized in the data attribute of a CausalTable.\nmatrix::Symbol: A key denoting the adjacency matrix over which summary is computed in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the key of the adjacency matrix in the arrays attribute of a CausalTable.\nweights::Union{Symbol, Nothing}: An optional variable by which each unit may be weighted in the summary.\n\n\n\n\n\n","category":"type"},{"location":"man/network-summaries/#CausalTables.KOrderStatistics-man-network-summaries","page":"Network summaries","title":"CausalTables.KOrderStatistics","text":"KOrderStatistics <: NetworkSummary\n\nA NetworkSummary which computes the top K ordered values of the target variable among each unit's connected neighbors in the adjacency matrix.\n\nFields\n\ntarget::Symbol: A key denoting the target variable to be summarized in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the target variable to be summarized in the data attribute of a CausalTable.\nmatrix::Symbol: A key denoting the adjacency matrix over which summary is computed in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the key of the adjacency matrix in the arrays attribute of a CausalTable.\nweights::Union{Symbol, Nothing}: An optional variable by which each unit may be weighted in the summary.\n\n\n\n\n\n","category":"type"},{"location":"man/network-summaries/#Defining-Your-Own-Summary-Measures","page":"Network summaries","title":"Defining Your Own Summary Measures","text":"","category":"section"},{"location":"man/network-summaries/","page":"Network summaries","title":"Network summaries","text":"Forthcoming.","category":"page"},{"location":"man/estimands/#Approximating-Ground-Truth-Causal-Estimands","page":"Approximating ground truth causal estimands","title":"Approximating Ground Truth Causal Estimands","text":"","category":"section"},{"location":"man/estimands/","page":"Approximating ground truth causal estimands","title":"Approximating ground truth causal estimands","text":"In causal inference, we are often interested in the value of some causal estimand, such as the average treatment effect (ATE) or the average policy effect (APE). These estimands are defined in terms of counterfactuals Y(a), the value of an outcome Y under a given treatment regime. For example, the average treatment effect is denoted","category":"page"},{"location":"man/estimands/","page":"Approximating ground truth causal estimands","title":"Approximating ground truth causal estimands","text":"mathbbEBig(Y(1) - Y(0)Big)","category":"page"},{"location":"man/estimands/","page":"Approximating ground truth causal estimands","title":"Approximating ground truth causal estimands","text":"where Y(a) denotes the outcome Y that would have occurred had the treatment been set to a. Similarly, we denote the average policy effect as","category":"page"},{"location":"man/estimands/","page":"Approximating ground truth causal estimands","title":"Approximating ground truth causal estimands","text":"mathbbEBig(Y(a^*) - Y(a)Big)","category":"page"},{"location":"man/estimands/","page":"Approximating ground truth causal estimands","title":"Approximating ground truth causal estimands","text":"where a is the natural value of treatment under no intervention and a^* is the value of treatment under some policy.","category":"page"},{"location":"man/estimands/","page":"Approximating ground truth causal estimands","title":"Approximating ground truth causal estimands","text":"CausalTables.jl provides functions that numerically approximate the values of several common estimands given a ground truth StructuralCausalModel object. This can be useful for evaluating the performance of causal inference methods on simulated data. Available estimands include:","category":"page"},{"location":"man/estimands/","page":"Approximating ground truth causal estimands","title":"Approximating ground truth causal estimands","text":"Counterfactual Means (cfmean)\nCounterfactual Differences (cfdiff)\nAverage Treatment Effect (ate), including among the Treated (att) and Untreated (atu)\nAverage Policy Effect (ape), also known as the causal effect of a Modified Treatment Policy.","category":"page"},{"location":"man/estimands/","page":"Approximating ground truth causal estimands","title":"Approximating ground truth causal estimands","text":"In addition, one can simulate counterfactual outcomes directly using the draw_counterfactual function. Each of these is documented in detail in the following section. For low-level functions that can be used to approximate more complicated custom ground truth estimands in various settings, see Computing ground truth conditional distributions.","category":"page"},{"location":"man/estimands/#API","page":"Approximating ground truth causal estimands","title":"API","text":"","category":"section"},{"location":"man/estimands/#CausalTables.additive_mtp-Tuple{Any}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.additive_mtp","text":"additive_mtp(δ)\n\nConstructs a function that adds a constant (or constant vector) δ to the treatment variable(s) in a CausalTable object. This function is intended to be used as an argument to ape.\n\nArguments\n\nδ: The \"additive shift\" to be applied to the treatment variable of a CausalTable.\n\nReturns\n\nA function that takes a CausalTable object as input and returns a column table of treatments that have been shifted by δ units.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Normal(L)),\n    Y ~ @.(Normal(A + 2 * L + 1))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\nape(scm, additive_mtp(0.5))\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.ape-Tuple{StructuralCausalModel, Function}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.ape","text":"ape(scm::StructuralCausalModel, intervention::Function; samples = 10^6)\n\nApproximate the average policy effect for a given structural causal model (SCM), along with its efficiency bound. This is also known as the causal effect of a modified treatment policy, and is approximated using Monte Carlo sampling. Note that unless intervention is piecewise smooth invertible, the estimated statistical quantity may not have a causal interpretation; see Haneuse and Rotnizky (2013). Mathematically, this is\n\nE(Y(d(a) - Y(a))\n\nwhere d(a) represents the intervention on the treatment variable(s) A, Y(d(a)) represents the counterfactual Y under treatment d(a), and Y(a) represents the counterfactual outcome under the naturally observed value of treatment. This statistical quantity is approximated using Monte Carlo sampling.\n\nConvenience functions for generating intervention functions include additive_mtp and multiplicative_mtp, which construct functions that respectively add or multiply a constant (or constant vector) to the treatment variable(s). One can also implement their own intervention function; this function must take as input a CausalTable object and return a NamedTuple object with each key indexing a treatment variable that has been modified according to the intervention. Also see cast_matrix_to_table_function for a convenience function for constructing interventions.\n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nintervention::Function: The intervention function to apply to the SCM.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The APE approximation.\n\nExample\n\nusing Distributions\ndgp = CausalTables.@dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Normal(L)),\n    Y ~ @.(Normal(A + 2 * L + 1))\n)\nscm = CausalTables.StructuralCausalModel(dgp, :A, :Y)\nape(scm, additive_mtp(0.5))\nape(scm, multiplicative_mtp(2.0))\n\n# example of a custom intervention function\ncustom_intervention = cast_matrix_to_table_function(x -> exp.(x))\nape(scm, custom_intervention)\n\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.ate-Tuple{StructuralCausalModel}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.ate","text":"ate(scm::StructuralCausalModel; samples = 10^6)\n\nApproximate the average treatment effect (ATE) for a given structural causal model (SCM), along with its efficiency bound, for a univariate binary treatment. Mathematically, this is\n\nE(Y(1) - Y(0))\n\nwhere Y(a) represents the counterfactual Y had the treatment A been set to a. This statistical quantity is approximated using Monte Carlo sampling.\n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The ATE approximation.\neff_bound: The variance of the counterfactual response, which is equal to the efficiency bound for IID data. If observations are correlated, this may not have a meaningful interpretation.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\nate(scm)\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.att-Tuple{StructuralCausalModel}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.att","text":"att(scm::StructuralCausalModel; samples = 10^6)\n\nApproximate the average treatment effect among the treated (ATT) for a given structural causal model (SCM), along with its efficiency bound, for a univariate binary treatment. Mathematically, this is\n\nE(Y(1) - Y(0) mid A = 1)\n\nwhere Y(a) represents the counterfactual Y had the treatment A been set to a. This statistical quantity is approximated using Monte Carlo sampling.\n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The ATT approximation.\neff_bound: The variance of the counterfactual response, which is equal to the efficiency bound for IID data. If observations are correlated, this may not have a meaningful interpretation.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\natt(scm)\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.atu-Tuple{StructuralCausalModel}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.atu","text":"atu(scm::StructuralCausalModel; samples = 10^6)\n\nApproximate the average treatment effect among the untreated (ATU) for a given structural causal model (SCM), along with its efficiency bound, for a univariate binary treatment. Mathematically, this is\n\nE(Y(1) - Y(0) mid A = 0)\n\nwhere Y(a) represents the counterfactual Y had the treatment A been set to a. This statistical quantity is approximated using Monte Carlo sampling.\n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The ATU approximation.\neff_bound: The variance of the counterfactual response, which is equal to the efficiency bound for IID data. If observations are correlated, this may not have a meaningful interpretation.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\natu(scm)\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.cast_matrix_to_table_function-Tuple{Function}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.cast_matrix_to_table_function","text":"cast_matrix_to_table_function(func::Function)\n\nWraps a given function func that operates on a matrix and returns a new function that operates on a CausalTable object. The returned function converts the CausalTable's treatment matrix to a table, applies func to this matrix, and then converts the result back to a column table with the same header as the original treatment matrix.\n\nArguments\n\nfunc::Function: A function that takes a matrix as input and returns a matrix.\n\nReturns\n\nA function that takes a CausalTable object as input and returns a column table.\n\nExample\n\ncustom_intervention = cast_matrix_to_table_function(x -> exp.(x))\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.cfdiff-Tuple{StructuralCausalModel, Function, Function}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.cfdiff","text":"cfdiff(scm::StructuralCausalModel, intervention1::Function, intervention2::Function; samples = 10^6)\n\nApproximate the difference between two counterfactual response means – that under intervention1 having been applied to the treatment, and that under intervention2 – for a given structural causal model (SCM), along with its efficiency bound. Mathematically, this is\n\nE(Y(d_1(a)) - Y(d_2(a)))\n\nwhere d_1 and d_2 represent intervention1 and intervention2 being applied on the treatment variable(s) A. This statistical quantity is approximated using Monte Carlo sampling. \n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nintervention1::Function: The first intervention function to be contrasted.\nintervention2::Function: The second intervention function to be contrasted.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The mean difference in counterfactual outcomes.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\ncfdiff(scm, treat_all, treat_none)\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.cfmean-Tuple{StructuralCausalModel, Function}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.cfmean","text":"cfmean(scm::StructuralCausalModel, intervention::Function; samples = 10^6)\n\nApproximate the counterfactual mean of the response had intervention been applied to the treatment, along with its efficiency bound, for a given structural causal model (SCM). Mathematically, this estimand is\n\nE(Y(d(a)))\n\nwhere d(a) represents an intervention on the treatment variable(s) A. This statistical quantity is approximated using Monte Carlo sampling. \n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nintervention::Function: The intervention function to apply to the SCM.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The mean of the counterfactual outcomes.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\ncfmean(scm, treat_all)\ncfmean(scm, treat_none)\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.draw_counterfactual-Tuple{StructuralCausalModel, CausalTable, Function}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.draw_counterfactual","text":"draw_counterfactual(scm::StructuralCausalModel, parents::CausalTable, intervention::Function) -> Vector\n\nGenerate counterfactual responses based on a given structural causal model (SCM), a table of response parents, and an intervention function. That is, sample the responses that would have occurred had some intervention been applied to the treatment specified by the structural causal model.\n\nArguments\n\nscm::StructuralCausalModel: The structural causal model used to generate counterfactual outcomes.\nparents::CausalTable: A table containing the variables causally preceding the response variable.\nintervention::Function: A function that defines the intervention to be applied to the parent variables. Use cast_matrix_to_table_function to convert a function acting on a treatment vector or matrix to a function that acts on a CausalTable.\n\nReturns\n\nA vector of counterfactual responses.\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.intervene-Tuple{CausalTable, Function}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.intervene","text":"intervene(ct::CausalTable, intervention::Function)\n\nApplies intervention to the treatment vector(s) within a CausalTable, and outputs a new CausalTable with the intervened treatment.\n\nArguments\n\nct::CausalTable: The data on which treatment should be intervened\nintervention::Function: A function that defines the intervention to be applied to the parent variables. Use cast_matrix_to_table_function to convert a function acting on a treatment vector or matrix to a function that acts on a CausalTable.\n\nReturns\n\nA CausalTable containing the same data as ct, but with the treatment variable(s) modified accoding to intervention\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\nct = rand(scm, 100)\nintervene(ct, treat_all)\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.multiplicative_mtp-Tuple{Any}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.multiplicative_mtp","text":"multiplicative_mtp(δ)\n\nConstructs a function that scales the treatment variable(s) in a CausalTable object by a constant δ. This function is intended to be used as an argument to ape.\n\nArguments\n\nδ: The \"multiplicative shift\" to be applied to the treatment variable of a CausalTable.\n\nReturns\n\nA function that takes a CausalTable object as input and returns a column table of treatments that have been scaled by δ units.\n\nExample\n\nusing Distributions\ndgp = CausalTables.@dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Normal(L)),\n    Y ~ @.(Normal(A + 2 * L + 1))\n)\nscm = CausalTables.StructuralCausalModel(dgp, :A, :Y)\nape(scm, multiplicative_mtp(2.0))\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.set_treatment_value-Tuple{CausalTable, Any}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.set_treatment_value","text":"set_treatment_value(ct::CausalTable, value)\n\nSets all treatments present in the data of a CausalTable to a specified value. This function is primarily used for interventions where the treatment value is set to a constant, such as in the case of binary treatments.\n\nArguments\n\nct::CausalTable: The causal table object containing treatment information and data.\nvalue: A value intended to represent the treatment value to set.\n\nReturns\n\nNamedTuple: A named tuple mapping each treatment variable to a vector of ones.\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.treat_all-Tuple{CausalTable}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.treat_all","text":"treat_all(ct::CausalTable)\n\nIntervenes on a CausalTable object by setting all treatment variables to 1.\n\nArguments\n\nct::CausalTable: A CausalTable object with a univariate binary treatment.\n\nReturns\n\nA NamedTuple object with the same header as the treatment matrix in ct, where each treatment variable is set to 1.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\ndata = rand(scm, 100)\ntreat_all(data)\n\n\n\n\n\n","category":"method"},{"location":"man/estimands/#CausalTables.treat_none-Tuple{Any}-man-estimands","page":"Approximating ground truth causal estimands","title":"CausalTables.treat_none","text":"treat_none(ct::CausalTable)\n\nIntervenes on a CausalTable object by setting all treatment variables to 0.\n\nArguments\n\nct::CausalTable: A CausalTable object with a univariate binary treatment.\n\nReturns\n\nA NamedTuple object with the same header as the treatment matrix in ct, where each treatment variable is set to 0.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\ndata = rand(scm, 100)\ntreat_none(data)\n\n\n\n\n\n","category":"method"},{"location":"man/ground-truth/#Computing-Ground-Truth-Conditional-Distributions","page":"Computing ground truth conditional distributions","title":"Computing Ground Truth Conditional Distributions","text":"","category":"section"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"One main goal of CausalTables.jl is to allow statisticians to easily develop and test causal inference methods on simulated data. To this end, the package provides a way to compute \"ground truth\" causal quantities under a particular structural causal model (SCM) and intervention.","category":"page"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"Quick methods to approximate the most common ground truth estimands such as the average treatment effect are provided in the section Approximating ground truth causal estimands. However, in many cases it is also helpful to know the ground truth of more complicated functions of the data, such as conditional distributions, conditional means, or conditional variances. For example, if one is building a machine learning model to predict a conditional mean mathbbE(Y mid X = x) or a conditional density p(y mid X = x), it may be useful to know the true conditional mean to evaluate the model's performance. This section will explain how to compute these ground truth quantities using CausalTables.jl.","category":"page"},{"location":"man/ground-truth/#Intervening-on-a-CausalTable","page":"Computing ground truth conditional distributions","title":"Intervening on a CausalTable","text":"","category":"section"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"First, let us set up a simple example. First, we'll define a DGP using the @dgp macro and create a StructuralCausalModel object from it. This DGP contains a binary treatment A that depends on a continuous confounder W and a continuous outcome Y that depends on both A and W. ","category":"page"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"using CausalTables\nusing Random\nusing Distributions\n\n# Define the sequence of random variables to be drawn\ndgp = @dgp(\n    W ~ Beta(2, 4),\n    A ~ Bernoulli.(0.5 .* W .+ 0.2),\n    Y ~ Normal.(W .+ A, 1)\n)\n\nscm = StructuralCausalModel(\n    dgp;\n    treatment = :A,\n    response = :Y\n)","category":"page"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"In the causal inference setting, we are typically concerned with outcomes under one or more interventions of interest. For example, for binary treatments, we often want to compare the outcome mean had every unit been treated versus had every unit not been treated. CausalTables.jl allows users to easily apply an intervention of interest to a given CausalTable, and subsequently compute counterfactual functions of interest, such as conditional means under intervention.","category":"page"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"# Draw a random CausalTable from the StructuralCausalModel\nRandom.seed!(1);\nct = rand(scm, 500)\n\n# Apply treated and untreated interventions to the CausalTable\nct_treated = intervene(ct, treat_all)\nct_untreated = intervene(ct, treat_none)","category":"page"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"To evaluate the causal effects of continuous treatments, one can apply the additive_mtp and multiplicative_mtp functions, which apply an additive or multiplicative shift, respectively, to the natural value of treatment. Their counterfactual differences (compared to the mean response in the source data) provide the causal analogues of a risk difference and risk ratio commonly estimated using linear models in scientific studies. ","category":"page"},{"location":"man/ground-truth/#Obtaining-Conditional-Distributions-and-Functionals","page":"Computing ground truth conditional distributions","title":"Obtaining Conditional Distributions and Functionals","text":"","category":"section"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"Once we've defined an SCM (see Generating data for statistical experiments) and have some table of intervened data with variables matching those of our DGP, we can compute the ground truth conditional distributions of any variable (given a corresponding DGP) using the condensity function. For any line starting with a ~ in the DGP, condensity will be able to return the true conditional distribution, a Distribution object from the package Distributions.jl, given the data. Some examples are shown below:","category":"page"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"# Distribution of the treatment in the observed data\nA_distribution = condensity(scm, ct, :A)\n\n# Distribution of the outcome had everyone been treated\nY_under_treatment = condensity(scm, ct_treated, :Y)\n\n# Distribution of the outcome had no one been treated\nY_under_treatment = condensity(scm, ct_untreated, :Y)","category":"page"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"One can also compute the ground truth of various functions of these distributions, including the conditional mean (conmean), conditional variance (convar), or propensity scores (propensity; this is the density function evaluated at the observed value of the given variable). To compute other functions of conditional densities not included in CausalTables.jl, please see Distributions.jl. Below, we show two examples of how one might compute an average treatment effect (ATE) using two different ground-truth functionals of the data.","category":"page"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"### Plug-in Estimate ###\nμ_treated = conmean(scm, ct_treated, :Y) \nμ_untreated = conmean(scm, ct_untreated, :Y) \nplugin = mean(μ_treated .- μ_untreated) \n\n### Inverse Propensity Weighted Estimate\np = propensity(scm, ct, :A) \ny = responsematrix(ct)\nipw = mean(y ./ p) .- mean(y)","category":"page"},{"location":"man/ground-truth/#Implementing-Your-Own-Interventions","page":"Computing ground truth conditional distributions","title":"Implementing Your Own Interventions","text":"","category":"section"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"Forthcoming.","category":"page"},{"location":"man/ground-truth/#Network-Summaries","page":"Computing ground truth conditional distributions","title":"Network Summaries","text":"","category":"section"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"In causal inference settings featuring network interference, the outcome of one unit is not just affected by its own treatment, but also by some summary function of neighboring treatments. CausalTables.jl can also compute conditional densities for certain classes of summary functions. ","category":"page"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"If the StructuralCausalModel contains a summary function on a line starting with $, condensity will return the conditional distribution of the variable being summarized only if it admits a closed-form solution (otherwise an error will be thrown). Note that if the DGP attempts to summarize a variable with no neighbors in a graph, the resulting conditional distribution will currently be Binomial(0, 0.5), which denotes a point-mass distribution at 0. Let's see an example.","category":"page"},{"location":"man/ground-truth/","page":"Computing ground truth conditional distributions","title":"Computing ground truth conditional distributions","text":"using Graphs\n\ndgp = @dgp(\n        W ~ Binomial(10, 0.3),\n        X ~ (@. Normal(W + 1)),\n        A = Graphs.adjacency_matrix(barabasi_albert(length(X), 2)),\n        Xs $ Sum(:X, :A),\n        Y ~ (@. LogNormal(log(0.2 * Xs + 4), 0.1 * W + 1))\n    )\nscm = StructuralCausalModel(dgp; treatment = :X, response = :Y)\n\nct = rand(scm, 5)\nW_distribution = condensity(scm, ct, :W)\nX_distribution = condensity(scm, ct, :X)\nXs_distribution = condensity(scm, ct, :Xs)","category":"page"},{"location":"man/ground-truth/#API","page":"Computing ground truth conditional distributions","title":"API","text":"","category":"section"},{"location":"man/ground-truth/#CausalTables.condensity-Tuple{StructuralCausalModel, CausalTable, Union{String, Symbol}}-man-ground-truth","page":"Computing ground truth conditional distributions","title":"CausalTables.condensity","text":"condensity(scm::StructuralCausalModel, ct::CausalTable, name::Symbol)\n\nCompute the conditional density of variable name in CausalTable ct that has been drawn from StructuralCausalModel scm.\n\nArguments\n\nscm::StructuralCausalModel: The StructuralCausalModel representing the data generating process.\nct::CausalTable: The CausalTable containing the observed data.\nname::Symbol: The variable for which to compute the conditional density.\n\nReturns\n\nThe conditional density of the variable var given the observed data.\n\n\n\n\n\n","category":"method"},{"location":"man/ground-truth/#CausalTables.conmean-Tuple{StructuralCausalModel, CausalTable, Union{String, Symbol}}-man-ground-truth","page":"Computing ground truth conditional distributions","title":"CausalTables.conmean","text":"conmean(scm::StructuralCausalModel, ct::CausalTable, name::Symbol)\n\nCompute the conditional mean of variable name in CausalTable ct that has been drawn from StructuralCausalModel scm.\n\nArguments\n\nscm::StructuralCausalModel: The StructuralCausalModel object representing the data generating process.\nct::CausalTable: The CausalTable object representing the data.\nname::Symbol: The variable for which to compute the conditional mean.\n\nReturns\n\nAn array of conditional means for the specified variable.\n\n\n\n\n\n","category":"method"},{"location":"man/ground-truth/#CausalTables.convar-Tuple{StructuralCausalModel, CausalTable, Union{String, Symbol}}-man-ground-truth","page":"Computing ground truth conditional distributions","title":"CausalTables.convar","text":"convar(scm::StructuralCausalModel, ct::CausalTable, name::Symbol)\n\nCompute the conditional variance of variable name in CausalTable ct that has been drawn from StructuralCausalModel scm.\n\nArguments\n\nscm::StructuralCausalModel: The StructuralCausalModel object representing the data generating process.\nct::CausalTable: The CausalTable object representing the data.\nname::Symbol: The variable for which to compute the conditional mean.\n\nReturns\n\nAn array of conditional variances for the specified variable.\n\n\n\n\n\n","category":"method"},{"location":"man/ground-truth/#CausalTables.propensity-Tuple{StructuralCausalModel, CausalTable, Union{String, Symbol}}-man-ground-truth","page":"Computing ground truth conditional distributions","title":"CausalTables.propensity","text":"propensity(scm::StructuralCausalModel, ct::CausalTable, name::Symbol)\n\nCompute the (generalized) propensity score of variable name in CausalTable ct that has been drawn from StructuralCausalModel scm.\n\nArguments\n\nscm::StructuralCausalModel: The StructuralCausalModel object representing the data generating process.\nct::CausalTable: The CausalTable object representing the data.\nname::Symbol: The variable for which to compute the conditional mean.\n\nReturns\n\nAn array of conditional probabilities for the specified variable (or densities, if the specified variable is continuous).\n\n\n\n\n\n","category":"method"},{"location":"man/generating-data/#Generating-Data-for-Statistical-Experiments","page":"Generating data for statistical experiments","title":"Generating Data for Statistical Experiments","text":"","category":"section"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"When evaluating a causal inference method, we often want to test it on data from a known causal model. CausalTables.jl allows us to define a DataGeneratingProcess (or DGP) to do just that. ","category":"page"},{"location":"man/generating-data/#Defining-a-DataGeneratingProcess","page":"Generating data for statistical experiments","title":"Defining a DataGeneratingProcess","text":"","category":"section"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"A data generating process describes a mechanism by which draws from random variables are simulated. It typically takes the form of a sequence of conditional distributions. CausalTables allows us to define a DGP as a DataGeneratingProcess object, which takes three arguments: the names of variables generated at each step, the types of these variables, and funcs, an array of functions of the form O -> *some code. ","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"Suppose, for example, that we wanted to simulate data from the following DGP:","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"beginalign*\n    W sim textDiscreteUniform(1 5) \n    X sim textNormal(W 1) \n    Y sim textNormal(X + 02W 1)\nendalign*","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"where X is the treatment, Y is the response, and W is a confounding variable affecting both X and Y. A verbose and inconvenient (albeit correct) way to define this DGP would be as follows:","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"using Distributions\nusing CausalTables\n\nDataGeneratingProcess(\n    [:W, :X, :Y],\n    [\n        O -> DiscreteUniform(1, 5), \n        O -> (@. Normal(O.W, 1)),\n        O -> (@. Normal(O.X + 0.2 * O.W, 1))\n    ]\n)","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"where O is an object that stores the output of each previous function in the sequence as a field with a name corresponding to its order in the sequence (i.e. in this example, the first function's output is stored as O.W, the second function's output is stored as O.X, and so on).","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"However, a much more convenient way to define this DGP is using the @dgp macro, which takes a sequence of conditional distributions of the form [variable name] ~ Distribution(args...) and deterministic variable assignments of the form [variable name] = f(...) and automatically generates a valid DataGeneratingProcess. For example, the easier way to define the DGP above is as follows:","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"distributions = @dgp(\n        W ~ DiscreteUniform(1, 5),\n        X ~ Normal.(W, 1),\n        Y ~ (@. Normal(X + 0.2 * W, 1))\n    )","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"Note that when using the @dgp macro, any symbol defined on the left side of an equation in the sequence can be used to pass in the output of a previous step on the right side. For example, in the above code, the symbol W is used to pass in the output of the first step to the second step. This works by metaprogramming which replaces W with O.W when the function is constructed by @dgp. ","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"We can also define steps other than distributions. There are four different types of \"steps\" that can be defined in a DGP sequence, each being constructed from a different \"linking\" symbol. Consider the following example, which uses all four types of steps:","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"using Graphs\n@dgp(\n    W ~ Poisson(1),\n    θ = exp.(W .+ 1),\n    X ~ Normal.(θ, θ),\n    G ≈ erdos_renyi(10, 0.5),\n    M = Graphs.adjacency_matrix(ER),\n    Xs $ Sum(:X, :G)\n)","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"Each ~ is used to denote a Distribution from Distributions.jl. These can both generate random data as well as admit expressions for the exact conditional distribution when calling functions like condensity (See Computing ground truth conditional distributions).\nThe = symbol is used to denote deterministic functions of previous steps. They can be used to easily compute and reuse transformations of random variables. When a function like condensity is called on a CausalTable, each step will be recomputed to propagate any changes or interventions that may have been made, on the table.\nThe ≈ symbol is used to denote random functions of previous steps that cannot necessarily be expressed as distributions – for example, here we use ≈ to generate a random graph. When a function like condensity is called on a CausalTable, these steps will not be re-evaluated, so this symbol should not be used for functions depend on the values of previous steps.\nThe $ symbol is used to denote NetworkSummary functions. Similar to =, a NetworkSummary computes a deterministic transformation of previous steps, usually based on a random graph; the only difference is that when drawn from a StructuralCausalModel (see next section), the NetworkSummary will be stored in the CausalTable that is generated. See Networks of Causally-Connected Units or Network summaries for more details.","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"In this way, we can define virtually any DGP that can be expressed as a sequence of conditional distributions or transformations. For ease of use, one can still use the O object in the @dgp macro to pass in the output of all previous steps, which is especially useful for programmatically-defined DGPs. For example, the following code is equivalent to the above code:","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"distributions = @dgp(\n        W ~ DiscreteUniform(1, 5),\n        X ~ Normal.(O[1], 1),\n        Y ~ Normal.(hcat(values(O)...) * [1, 0.2], 1)\n    )","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"In the first step, previous variables are accessed by index using O[1], and in the third step, all previous variables are combined into a matrix by hcat(values(O)...). Be careful when using these constructions, however, as they can make the code harder to read and understand. In some cases, it may be better to construct a DataGeneratingProcess manually using the constructor, for which several additional utilities are available. ","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"For instance, if one wanted to generate a large number of variables with the same distribution, one could use the DataGeneratingProcess constructor without specifying variable names, in which case names will be automatically generated:","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"many_distributions = DataGeneratingProcess(\n    [O -> Normal(0, 1) for _ in 1:100]\n)","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"In addition, the merge function can be used to combine two separate DGP sequences into one:","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"# Define a new distribution whose mean is the mean of previous draws\noutput_distribution = @dgp(\n    Y ~ Normal.(reduce(+, values(O)) ./ n, 1)\n)\n# Merge our previous `many_distributions` with the new `output_distribution`\nnew_distributions = merge(many_distributions, output_distribution)","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"Finally, note that a DGP can depend on external variables. This is especially useful for running multiple simulations with different parameters, as one can define a function to generate DGPs from various sets of parameters:","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"# Define a DGP that takes in parameters\ndgp_family(a, b; σ2X = 1, σ2Y = 1) = @dgp(\n        W ~ DiscreteUniform(a, b),\n        X ~ Normal.(W, σ2X),\n        Y ~ (@. Normal(X + 0.2 * W, σ2Y))\n    )\n\n# Create the same DGP but with different parameters\ndgp_family(1, 5)\ndgp_family(1, 10; σ2X = 2, σ2Y = 2)","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"Finally, if dgp denotes a DataGeneratingProcess, one can draw a sample path from it by calling rand(dgp, n) where n is the number of samples to draw. This will return a NamedTuple with the output of each step in the DGP. However, when running causal simulations, it is often more convenient to obtain a CausalTable object directly, which brings us to the next section: the StructuralCausalModel.","category":"page"},{"location":"man/generating-data/#Defining-a-StructuralCausalModel","page":"Generating data for statistical experiments","title":"Defining a StructuralCausalModel","text":"","category":"section"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"In CausalTables.jl, a StructuralCausalModel is a data generating process endowed with some causal interpretation. Constructing a StructuralCausalModel allows users to randomly draw a CausalTable with the necessary components from the DataGeneratingProcess they've defined. With the previous DataGeneratingProcess in hand, we can define a StructuralCausalModel object like so – treatment and response in the causal model are specified as keyword arguments to the DataGeneratingProcess constructor:","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"scm = StructuralCausalModel(\n    distributions;\n    treatment = :X,\n    response = :Y\n)","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"When a StructuralCausalModel is constructed with only treatment and response specified, all other variables are assumed to be confounders. However, one can also explicitly specify the causes of both treatment and response by passing them as a NamedTuple of lists to the StructuralCausalModel constructor:","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"scm = StructuralCausalModel(\n    distributions;\n    treatment = :X,\n    response = :Y,\n    causes = (X = [:W], Y = [:X, :W])\n)","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"In the above, the keys of causes denote the variables whose causes are being specified, and the values are lists of variables that cause the key variable. In this case, the causes of the treatment X are specified as [:W], and the causes of the response Y are specified as [:X, :W], identical to how they are defined in a CausalTable object. Just like for a CausalTable, while causes of other variables besides treatment and response can be specified, they are not necessary: only the causes of treatment and response are required as input. ","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"note: Note\ncauses must be specified manually unless the user is assuming that all unlabeled variables cause both treatment and outcome. This is the default assumption of a StructuralCausalModel, but it may not not factually match the model encoded by the DataGeneratingProcess. This behavior is allowed for two reasons: (1) to permit a random draw of a CausalTable with an 'incorrect' causal model, which can be useful for benchmarking the robustness of different causal inference methods to model misspecification, and (2) to simulate causal models that implicitly condition on a particular set of variables by leaving them out of the causes argument. Otherwise, ensure that labels in causes do not contradict the data generating process! ","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"Finally, when setting up multiple simulations with similar DGPs and treatment/response labels, remember one can define a function to avoid repeating boilerplate code. Similar to how we defined a function earlier to generate multiple DGPs based on different sets of parameters, we can bundle everything together to create multiple SCMs:  ","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"\nscm_family(a, b; σ2X = 1, σ2Y = 1) = StructuralCausalModel(\n    @dgp(\n        W ~ DiscreteUniform(a, b),\n        X ~ Normal.(W, σ2X),\n        Y ~ (@. Normal(X + 0.2 * W, σ2Y))\n    ); \n    treatment = :X,\n    response = :Y\n)\n\nscm_family(1, 5)\nscm_family(1, 10; σ2X = 2, σ2Y = 2)","category":"page"},{"location":"man/generating-data/#Networks-of-Causally-Connected-Units","page":"Generating data for statistical experiments","title":"Networks of Causally-Connected Units","text":"","category":"section"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"In some cases, we might work with data in which units may not be causally independent, but rather, in which one unit's variables could dependent on some summary function of its neighbors. Generating data from such a model can be done by adding lines of the form Xs $ NetworkSummary to the @dgp macro.","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"Here's an example of how such a StructuralCausalModel might be constructed:","category":"page"},{"location":"man/generating-data/","page":"Generating data for statistical experiments","title":"Generating data for statistical experiments","text":"using Graphs\nusing CausalTables\nusing Distributions\n\ndgp = @dgp(\n        W ~ DiscreteUniform(1, 5),\n        n = length(W),\n        A = Graphs.adjacency_matrix(erdos_renyi(n, 0.5)),\n        Ws $ Sum(:W, :A),\n        X ~ (@. Normal(Ws, 1)),\n        Xs $ Sum(:X, :A),\n        Y ~ (@. Normal(Xs + 0.2 * Ws, 1))\n    )\n\nscm = StructuralCausalModel(\n    dgp;\n    treatment = :X,\n    response = :Y\n)","category":"page"},{"location":"man/generating-data/#API","page":"Generating data for statistical experiments","title":"API","text":"","category":"section"},{"location":"man/generating-data/#CausalTables.DataGeneratingProcess-man-generating-data","page":"Generating data for statistical experiments","title":"CausalTables.DataGeneratingProcess","text":"mutable struct DataGeneratingProcess\n\nA struct representing a data generating process.\n\nFields\n\nnames: An array of symbols representing the names of the variables.\ntypes: An array of symbols representing the types of the variables.\nfuncs: An array of functions representing the generating functions for each variable.\n\n\n\n\n\n","category":"type"},{"location":"man/generating-data/#CausalTables.StructuralCausalModel-man-generating-data","page":"Generating data for statistical experiments","title":"CausalTables.StructuralCausalModel","text":"struct StructuralCausalModel\n\nA struct representing a structural causal model (SCM). This includes a DataGeneratingProcess \n\nArguments\n\ndgp::DataGeneratingProcess: The data generating process from which random data will be drawn.\ntreatment::Vector{Symbol}: The variables representing the treatment.\nresponse::Vector{Symbol}: The variables representing the response.\ncauses::Union{NamedTuple, Nothing}: A NamedTuple of Vectors labeling the causes of relevant variables in the data-generating process. If nothing, will assume that all variables not contained in treatment or response are common causes of both.\narraynames: Names of auxiliary variables used in the DataGeneratingProcess that are not included as \"tabular\" variables. Most commonly used to denote names of adjacency matrices used to compute summary functions of previous steps. \n\n\n\n\n\n","category":"type"},{"location":"man/generating-data/#Base.rand-Tuple{StructuralCausalModel, Int64}-man-generating-data","page":"Generating data for statistical experiments","title":"Base.rand","text":"rand(scm::StructuralCausalModel, n::Int)\n\nGenerate random data from a Structural Causal Model (SCM) using the specified number of samples.\n\nArguments\n\nscm::StructuralCausalModel: The Structural Causal Model from which to generate data.\nn::Int: The number of samples to generate.\n\nReturns\n\nA CausalTable object containing the generated data.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#Turning-Your-Data-Into-a-CausalTable","page":"Turning data into a CausalTable","title":"Turning Your Data Into a CausalTable","text":"","category":"section"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"In Julia, most datasets are stored in a Table: a data structure with a Tables.jl-compatible interface. One of the main purposes of CausalTables.jl is to wrap a Table of data in Julia in order to provide it as input to some other causal inference package. Given a Table of some data, we can turn it into a CausalTable by specifying the treatment, response, and control variables. ","category":"page"},{"location":"man/formatting/#Constructing-the-CausalTable","page":"Turning data into a CausalTable","title":"Constructing the CausalTable","text":"","category":"section"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"The code below provides an example of how to wrap the Boston Housing dataset as a CausalTable to answer causal questions of the form \"How would changing nitrous oxide air pollution (NOX) within Boston-area towns affect median home value (MEDV)?\" Any dataset in a Tables.jl-compliant format can be wrapped as a CausalTable. In this example, we turn a DataFrame from DataFrames.jl into a CausalTable object.","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"using CausalTables\nusing MLDatasets: BostonHousing\nusing DataFrames\n\n# get data in a Tables.jl-compliant format\ntbl = BostonHousing().dataframe\n\n# Wrapping the dataset in a CausalTable\nctbl = CausalTable(tbl; treatment = :NOX, response = :MEDV)\n\nnothing # hide","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"When only treatment and response are specified, all other variables are assumed to be confounders. However, one can also explicitly specify the causes of both treatment and response by passing them as a NamedTuple of lists to the CausalTable constructor. In the example below, we specify the causes of the treatment NOX only as [:CRIM, :INDUS], and the causes of the response MEDV are specified as [:CRIM, :INDUS, :NOX].","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"ctbl = CausalTable(tbl; treatment = :NOX, response = :MEDV, \n                        causes = (NOX = [:CRIM, :INDUS], MEDV = [:CRIM, :INDUS, :NOX]))\n","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"Note that a full representation of the causes of each variable is not required, though they can be specified (this is often referred to a \"directed acyclic graph\"). Only the causes of the treatment and response are necessary as input; CausalTables.jl can compute other types of variables one might be interested in like confounders or mediators automatically. ","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"warning: Warning\nWhen provided, the partial edgelist represented by causes assumes that if variable A is not listed as a cause of B, then no \"causal path\" exists between A and B – the two variables are uncorrelated. This differs slightly from the common definition of a directed acyclic graph edge in causal inference, where A can be considered a cause of B even if it only acts through another variable C. In this case, specify both A and C as causes of B in causes when constructing the CausalTable.","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"After wrapping a dataset in a CausalTable object, the Tables.jl is available to call on the CausalTable as well. Below, we demonstrate a few of these functions, as well as additional utility functions for causal inference tasks made available by CausalTables.jl.","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"using Tables\n\n# Examples of using the Tables.jl interface\nTables.getcolumn(ctbl, :NOX) # extract specific column\nTables.subset(ctbl, 1:5)     # exact specific rows\nTables.columnnames(ctbl)     # obtain all column names","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"In addition, the CausalTable object has several utility functions that can be used to extract different types of variables relevant to causal inference from the CausalTable object.","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"# Additional utility functions for CausalTables\ntreatment(ctbl)              # get CausalTable of treatment variables\nresponse(ctbl)               # get CausalTable of response variables\ntreatmentparents(ctbl)       # get CausalTable of treatment and response\nresponseparents(ctbl)        # get CausalTable of treatment and confounders\n\nparents(ctbl, :NOX)          # get CausalTable of parents of a particular variable\n\nconfounders(ctbl)            # get CausalTable of confounders\nmediators(ctbl)              # get CausalTable of mediators\ninstruments(ctbl)            # get CausalTable of instruments\n\ndata(ctbl)                   # get underlying wrapped dataset of a CausalTable\n\nnothing # hide","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"Although the CausalTable object is immutable, one can replace the values of its attributes with new ones using the replace function. The code below demonstrates how to replace the treatment and response variables of the CausalTable object ctbl with :CRIM and nothing, respectively. Setting causes = nothing is a quick shortcut to specify that all unlabeled variables are confounders of the treatment-response relationship.","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"# Replace one or more attributes of the CausalTable.\n# Setting `causes = nothing` is a quick shortcut to specify\n# that all unlabeled variables are confounders of the treatment-response relationship\nCausalTables.replace(ctbl; response = :CRIM, causes = nothing) \n\nnothing # hide","category":"page"},{"location":"man/formatting/#Tables-with-Network-Dependent-Units","page":"Turning data into a CausalTable","title":"Tables with Network-Dependent Units","text":"","category":"section"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"The previous example assumes that each unit (row in the Table, in this case tbl), is \"causally independent\" of every other unit – that is, the treatment of one unit does not affect the response of any other unit. This is a component of the \"stable unit treatment value assumption\" (SUTVA) often used in causal inference. In some cases, however, we might work with data in which units may not be causally independent, but rather, in which one unit's variables depend on some summary function of its neighbors","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"In this case, one must instead perform causal inference on the summary functions of each unit's neighbors (Aronow and Samii, 2017). To do this, each CausalTable has two relevant arguments that can be used to correct SUTVA violations. The arrays argument is a NamedTuple that can store adjacency matrices and other miscellaneous parameters that denote the causal relationships between variables. The summaries argument is a tuple of NetworkSummary objects that can be used to summarize the network relationships between units by referencing variables in either the underlying data or the arrays argument of CausalTable (or both). ","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"The code below provides an example of how such a CausalTable might be constructed to consider a summary function treatment in the case of causally-dependent units, using the Karate Club dataset. In this example, treatment is defined as the number of friends a club member has, denoted by the summary function parameter summaries = (friends = Friends(:F),). Hence, this answers the causal question \"how would changing a subject's number of friends (friends) affect which club they are likely to join (labels_clubs)?\" ","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"We store the network relationships between units as an adjacency matrix F by assigning it to the arrays parameters. This allows the Friends(:F) summary function to access it when calling summarize(ctbl). More detail on the types of NetworkSummary that can be used in a dependent-data CausalTable can be found in Network Summaries","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"using CausalTables\nusing MLDatasets\nusing Graphs\n\n# Get a Table of Karate Club data from MLDatasets\ndata = KarateClub()\ntbl = data.graphs[1].node_data\n\n# Convert the karate club data into a Graphs.jl graph object\ng = SimpleGraphFromIterator([Edge(x...) for x in zip(data.graphs[1].edge_index...)])\n\n# Store the \"friends\" as an the adjacency matrix in a NamedTuple\n# Note that the input to arrays must be a NamedTuple, even if there is only one summary variable, \n# so the trailing comma is necessary.\nm = (F = Graphs.adjacency_matrix(g),)\n\n# Construct a CausalTable with the adjacency matrix stored in `arrays` and a summary variable recording the number of friends\nctbl = CausalTable(tbl; treatment = :friends, response = :labels_clubs, arrays = m, summaries = (friends = Friends(:F),))\n\nnothing # hide","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"One can then call the function summarize(ctbl) to compute the values of the summary function on the causal table. ","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"Based on these summaries, it is also possible to extract two matrices from the CausalTable object: the adjacency_matrix and the dependency_matrix. The adjacency_matrix denotes which units are causally dependent upon one another: an entry of 1 in cell (ij) indicates that some variable in unit i exhibits a causal relationship to some variable in unit j. The dependency_matrix denotes which units are statistically dependent upon one another: an entry of 1 in cell (ij) indicates that the data of unit i is correlated with the data in unit j. Two units are correlated if they either are causally dependent (neighbors in the adjacency matrix) or share a common neighbor in the adjacency matrix.","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"CausalTables.adjacency_matrix(ctbl) # get adjacency matrix\nCausalTables.dependency_matrix(ctbl) # get dependency matrix\n\nnothing # hide","category":"page"},{"location":"man/formatting/#API","page":"Turning data into a CausalTable","title":"API","text":"","category":"section"},{"location":"man/formatting/#Base.replace-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"Base.replace","text":"replace(o::CausalTable; kwargs...)\n\nReplace the fields of a CausalTable object with the provided keyword arguments.\n\nArguments\n\no::CausalTable: The CausalTable object to be replaced.\nkwargs...: Keyword arguments specifying the new values for the fields.\n\nReturns\n\nA new CausalTable object with the specified fields replaced.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.adjacency_matrix-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.adjacency_matrix","text":"adjacency_matrix(o::CausalTable)\n\nGenerate the adjacency matrix induced by the summaries and arrays attributes of a CausalTable object. This matrix denotes which units are causally dependent upon one another: an entry of 1 in cell (i,j) indicates that some variable in unit i exhibits a causal relationship to some variable in unit j. \n\nArguments\n\no::CausalTable: The CausalTable object for which the adjacency matrix is to be generated.\n\nReturns\n\nA boolean matrix representing the adjacency relationships in the CausalTable.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.confoundernames-Tuple{CausalTable, Symbol, Symbol}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.confoundernames","text":"confoundernames(o::CausalTable, x::Symbol, y::Symbol)\n\nOutputs the names of the confounders of the causal relationship between x and y from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the confounder names.\nx::Symbol, y::Symbol: The two variables whose confounders should be selected.\n\nReturns\n\nA Vector of Symbols containing the names of the confounders between x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.confoundernames-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.confoundernames","text":"confoundernames(o::CausalTable)\n\nOutputs the confounder names of each response-treatment pair from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the confounder names of each treatment-response pair.\n\nReturns\n\nA matrix of Vectors containing the confounder names of each treatment-response pair.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.confounders-Tuple{CausalTable, Symbol, Symbol}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.confounders","text":"confounders(o::CausalTable, x::Symbol, y::Symbol)\n\nSelects the common causes for a specific pair of variables (x,y) from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the confounders.\nx::Symbol, y::Symbol: The two variables whose confounders should be selected.\n\nReturns\n\nA new CausalTable containing only the confounders of both x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.confounders-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.confounders","text":"confounders(o::CausalTable; collapse_parents = true)\n\nSelects the confounders of each response-treatment pair from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the confounder variables of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single CausalTable object if there is either only one treatment-response pair or all pair share the same set of confounders. Defaults to true.\n\nReturns\n\nA new CausalTable containing only the confounders (if a single response, or all responses share the same set of causes); otherwise, a Matrix of CausalTable objects containing the confounders of each treatment-response pair, where rows represent responses and columns represent treatments.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.confoundersmatrix-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.confoundersmatrix","text":"confoundersmatrix(o::CausalTable; collapse_parents = true)\n\nOutputs the treatment-variable confounders from the given CausalTable object as a matrix (or matrix of matrices, if multiple treatment-response pairs are present).\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the confounders of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single Matrix object if there is either only one treatment-response pair or all pair share the same set of confounders. Defaults to true.\n\nReturns\n\nA matrix containing only the confounders.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.data-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.data","text":"data(o::CausalTable)\n\nRetrieve the data stored in a CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable from which to retrieve the data.\n\nReturns\n\nThe data stored in the CausalTable object.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.dependency_matrix-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.dependency_matrix","text":"dependency_matrix(o::CausalTable)\n\nGenerate the dependency matrix induced by the summaries and arrays attributes of a CausalTable object. This matrix stores which units are statistically dependent upon one another: an entry of 1 in cell (i,j) indicates that the data of unit i is correlated with the data in unit j. Two units are correlated if they either are causally dependent (neighbors in the adjacency matrix) or share a common cause (share a neighbor in the adjacency matrix).\n\nArguments\n\no::CausalTable: The CausalTable object for which the dependency matrix is to be generated.\n\nReturns\n\nA boolean matrix representing the  relationships in the CausalTable.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.instrumentnames-Tuple{CausalTable, Symbol, Symbol}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.instrumentnames","text":"instrumentnames(o::CausalTable, x::Symbol, y::Symbol)\n\nOutputs the names of the instruments of the causal relationship between x and y from the given CausalTable object; that is, variables that are associated with x but do not cause y.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediator names.\nx::Symbol, y::Symbol: The two variables whose mediators should be selected.\n\nReturns\n\nA Vector of Symbols containing the names of the mediators between x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.instrumentnames-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.instrumentnames","text":"instrumentnames(o::CausalTable)\n\nOutputs the instrument names of each treatment-response pair from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the instrument names of each treatment-response pair.\n\nReturns\n\nA matrix of Vectors containing the instrument names of each treatment-response pair.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.instruments-Tuple{CausalTable, Symbol, Symbol}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.instruments","text":"instruments(o::CausalTable, x::Symbol, y::Symbol)\n\nSelects the instruments for a specific pair of variables (x,y) from the given CausalTable object; that is, variables that are associated with x but do not cause y.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the instruments.\nx::Symbol, y::Symbol: The two variables whose instruments should be selected.\n\nReturns\n\nA new CausalTable containing only the instruments of both x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.instruments-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.instruments","text":"instruments(o::CausalTable; collapse_parents = true)\n\nSelects the instruments of each treatment-response pair from the given CausalTable object; that is, variables that are associated with the treatment but do not cause the response.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the instrumental variables of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single CausalTable object if there is either only one treatment-response pair or all pair share the same set of instruments. Defaults to true.\n\nReturns\n\nA new CausalTable containing only the instruments (if a single response, or all responses share the same set of instruments); otherwise, a Matrix of CausalTable objects containing the instruments of each treatment-response pair, where rows represent responses and columns represent treatments.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.instrumentsmatrix-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.instrumentsmatrix","text":"instrumentsmatrix(o::CausalTable; collapse_parents = true)\n\nOutputs the treatment-variable instruments from the given CausalTable object as a matrix (or matrix of matrices, if multiple treatment-response pairs are present).\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the instruments of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single Matrix object if there is either only one treatment-response pair or all pair share the same set of instruments. Defaults to true.\n\nReturns\n\nA matrix containing only the confounders.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.mediatornames-Tuple{CausalTable, Symbol, Symbol}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.mediatornames","text":"mediatornames(o::CausalTable, x::Symbol, y::Symbol)\n\nOutputs the names of the mediators of the causal relationship between x and y from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediator names.\nx::Symbol, y::Symbol: The two variables whose mediators should be selected.\n\nReturns\n\nA Vector of Symbols containing the names of the mediators between x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.mediatornames-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.mediatornames","text":"mediatornames(o::CausalTable)\n\nOutputs the mediator names of each response-treatment pair from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediator names of each treatment-response pair.\n\nReturns\n\nA matrix of Vectors containing the mediator names of each treatment-response pair.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.mediators-Tuple{CausalTable, Symbol, Symbol}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.mediators","text":"mediators(o::CausalTable, x::Symbol, y::Symbol)\n\nSelects the mediators for a specific pair of variables (x,y) from the given CausalTable object; that is, the variables that are caused by x and cause y.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediators.\nx::Symbol, y::Symbol: The two variables whose mediators should be selected.\n\nReturns\n\nA new CausalTable containing only the mediators of both x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.mediators-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.mediators","text":"mediators(o::CausalTable; collapse_parents = true)\n\nSelects the mediators of each treatment-response pair from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediator variables of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single CausalTable object if there is either only one treatment-response pair or all pair share the same set of mediators. Defaults to true.\n\nReturns\n\nA new CausalTable containing only the mediators (if a single response, or all responses share the same set of mediators); otherwise, a Matrix of CausalTable objects containing the mediators of each treatment-response pair, where rows represent responses and columns represent treatments.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.mediatorsmatrix-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.mediatorsmatrix","text":"mediatorsmatrix(o::CausalTable; collapse_parents = true)\n\nOutputs the treatment-variable confounders from the given CausalTable object as a matrix (or matrix of matrices, if multiple treatment-response pairs are present).\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediators of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single Matrix object if there is either only one treatment-response pair or all pair share the same set of mediators. Defaults to true.\n\nReturns\n\nA matrix containing only the confounders.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.parents-Tuple{CausalTable, Symbol}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.parents","text":"parents(o::CausalTable, symbol)\n\nSelects the variables that precede symbol causally from the CausalTable o, based on the causes attribute. Note that if symbol is not contained within o.causes, this function will output an empty CausalTable.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the parent variables of symbol.\nsymbol: The variable for which to extract the parent variables.\n\nReturns\n\nA new CausalTable containing only the parents of symbol\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.reject-Tuple{CausalTable, Symbol}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.reject","text":"reject(o::CausalTable, symbols)\n\nRemoves the columns specified by symbols from the CausalTable object o.\n\nArguments\n\no::CausalTable: The CausalTable object from which symbols will be rejected.\nsymbols: A collection of symbols to be rejected from the CausalTable.\n\nReturns\n\nA new CausalTable object with the specified symbols removed from its data.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.response-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.response","text":"response(o::CausalTable)\n\nSelects the response column(s) from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to select the response column(s).\n\nReturns\n\nA new CausalTable containing only the response column(s).\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.responsematrix-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.responsematrix","text":"responsematrix(o::CausalTable)\n\nOutputs the response column(s) from the given CausalTable object as a matrix.\n\nArguments\n\no::CausalTable: The CausalTable object from which to select the response column(s).\n\nReturns\n\nA matrix containing only the response column(s)\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.responseparents-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.responseparents","text":"responseparents(o::CausalTable)\n\nSelects the parents of each response variable from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the parent variables of each response.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single CausalTable object if there is either only one response or all response have the same parents. Defaults to true.\n\nReturns\n\nA new CausalTable containing only the causes of the responses (if a single response, or all responses share the same set of causes); otherwise, a Vector of CausalTable objects containing the causes of each response.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.select-Tuple{CausalTable, Symbol}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.select","text":"select(o::CausalTable, symbols)\n\nSelects specified columns from a CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which columns are to be selected.\nsymbols: A list of symbols representing the columns to be selected.\n\nReturns\n\nA new CausalTable object with only the selected columns.\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.treatment-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.treatment","text":"treatment(o::CausalTable)\n\nSelects the treatment column(s) from the given CausalTable object. treatment\n\nArguments\n\no::CausalTable: The CausalTable object from which to select the treatment column(s).\n\nReturns\n\nA new CausalTable containing only the treatment column(s)\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.treatmentmatrix-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.treatmentmatrix","text":"treatmentmatrix(o::CausalTable)\n\nOutputs the treatment column(s) from the given CausalTable object as a matrix.\n\nArguments\n\no::CausalTable: The CausalTable object from which to select the treatment column(s).\n\nReturns\n\nA matrix containing only the treatment column(s)\n\n\n\n\n\n","category":"method"},{"location":"man/formatting/#CausalTables.treatmentparents-Tuple{CausalTable}-man-formatting","page":"Turning data into a CausalTable","title":"CausalTables.treatmentparents","text":"treatmentparents(o::CausalTable)\n\nSelects the parents of each treatment variable from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the parent variables of each treatment.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single CausalTable object if there is either only one treatment or all treatments have the same parents. Defaults to true.\n\nReturns\n\nA new CausalTable containing only the causes of the treatment (if a single treatment, or all treatments share the same set of causes); otherwise, a Vector of CausalTable objects containing the causes of each treatment.\n\n\n\n\n\n","category":"method"},{"location":"#CausalTables.jl","page":"Home","title":"CausalTables.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A common interface for processing and simulating data for causal inference in Julia.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The goal of CausalTables.jl is to simplify the development of statistical causal inference methods in Julia. To this end, the package provides two sets of tools:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The CausalTable, a Tables.jl-compliant data structure that wraps a table of data with labels of the causes of relevant variables, denoted via a type of directed acyclic graph (DAG). Users can call existing functions to easily intervene on treatment variables, identify common subsets of variables (confounders, mediators, instruments, etc.) or use causal labels in other ways – all while still allowing the data to be used with other Julia packages that accept Tables.jl data structures.\nThe StructuralCausalModel interface, which allows users to encode a Structural Causal Model (SCM), a sequence of conditional distributions where each distribution can depend (causally) on any of the previous. This supports simulating data from arbitrary causal structures, extract ground truth distributions conditional on the data generated in previous steps, and approximating common ground-truth estimands such as the average treatment effect or policy effect. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"What sets this package apart? CausalTables.jl provides a common interface for manipulating tabular data for causal inference. While packages like CausalInference.jl only focus on causal graphs and discovery algorithms, the CausalTable interface provides utility functions to clean and manipulate practical datasets for input into statistical estimators. The simulation capabilities of CausalTables.jl are similar to those of probabilistic programming languages like Turing.jl or Gen.jl; however, unlike these packages, with CausalTables.jl users can extract the true conditional distributions of relevant variables from a dataset in closed-form after data has been generated. This makes it easy to extract parameters like ground-truth (\"oracle\") conditional means or propensity scores, which are often helpful for testing whether an estimator is behaving as intended.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CausalTables.jl can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg> add CausalTables","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let's walk through how CausalTables.jl package can be used to simplify doing causal inference in Julia. ","category":"page"},{"location":"#Simulating-Data-from-a-StructuralCausalModel","page":"Home","title":"Simulating Data from a StructuralCausalModel","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To set up a statistical simulation using CausalTables.jl, we first define a StructuralCausalModel (SCM). This consists of two parts: a DataGeneratingProcess (DGP) that controls how the data is generated, and a list of variables to define the basic structure of the underlying causal diagram.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A DataGeneratingProcess can be constructed using the @dgp macro, which takes a sequence of conditional distributions of the form [name] ~ Distribution(args...) or auxiliary variables [name] = some code... and returns a DataGeneratingProcess object. Then, one can construct an StructuralCausalModel by passing the DGP to its construct, along with labels of the treatment and response variables. Note that using Distributions is almost always required before defining a DGP, since the package Distributions.jl is used to define the conditional distribution of random components at each step.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using CausalTables\nusing Random\nusing Distributions\n\ndgp = @dgp(\n        W ~ DiscreteUniform(1, 5),\n        X ~ (@. Normal(W, 1)),\n        Y ~ (@. Normal(X + 0.2 * W, 1))\n    )\n\nscm = StructuralCausalModel(\n    dgp;\n    treatment = :X,\n    response = :Y\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"To create multiple versions of an SCM with different parameters, simply define a function and call it:","category":"page"},{"location":"","page":"Home","title":"Home","text":"scm_family(a, b; σ2X = 1, σ2Y = 1) = StructuralCausalModel(\n    @dgp(\n        W ~ DiscreteUniform(a, b),\n        X ~ (@. Normal(W, σ2X)),\n        Y ~ (@. Normal(X + 0.2 * W, σ2Y))\n    ); \n    treatment = :X, response = :Y\n)\n\nscm_family(1, 5)\nscm_family(1, 10; σ2X = 2, σ2Y = 2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"One we've defined our list of distribution functions, we can generate data from the DGP using the rand function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Random.seed!(1);\ndata = rand(scm, 5)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can also apply various causal interventions to the data using the intervene function. The example below computes a new version of the CausalTable with each unit's treatment shifted by 1 – this is analogous to the effect estimated by a classical linear regression analysis. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"data_intervened = intervene(data, additive_mtp(1))","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a more detailed guide of how to generate data please refer to Generating Data.","category":"page"},{"location":"#Computing-Ground-Truth-Functionals","page":"Home","title":"Computing Ground Truth Functionals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Once we've defined a DGP, we can approximate ground truth statistical functionals along with their efficiency bounds (variance of the counterfactual outcome) for a specified SCM using built-in functions. In general, these include","category":"page"},{"location":"","page":"Home","title":"Home","text":"Counterfactual Means (cfmean)\nCounterfactual Differences (cfdiff)\nAverage Treatment Effect (ate), including among the Treated (att) and Untreated (atu)\nAverage Policy Effect (ape), also known as the causal effect of a Modified Treatment Policy. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the complete API of available ground truth causal estimands, see Estimands","category":"page"},{"location":"","page":"Home","title":"Home","text":"cfmean(scm, additive_mtp(1))\n\n# output\n(μ = 4.599337273915866,)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For problems that involving functionals not available through CausalTables.jl or that require more fine-grained knowledge of the true conditional distributions for a given dataset, this package also implements the condensity function. This function computes the true conditional distributions of any variable in a CausalTable (given a corresponding DGP). The function returns a vector of Distribution objects from the package Distributions.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"X_distribution = condensity(scm, data, :X)\n\n# output\n5-element Vector{Normal{Float64}}:\n Distributions.Normal{Float64}(μ=1.0, σ=1.0)\n Distributions.Normal{Float64}(μ=2.0, σ=1.0)\n Distributions.Normal{Float64}(μ=4.0, σ=1.0)\n Distributions.Normal{Float64}(μ=4.0, σ=1.0)\n Distributions.Normal{Float64}(μ=5.0, σ=1.0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For convenience, there also exists functins like conmean, convar, and propensity that extract the true conditional mean, variance, and (generalized) propensity score of a specific variable the CausalTable. One can apply this to an \"intervened\" version of data to obtain functionals of the outcome under intervention:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Y_mean = conmean(scm, data_intervened, :Y)\n\n# output\n5-element Vector{Float64}:\n 2.467564418628885\n 5.149933692528245\n 4.973979208080702\n 4.757247582108903\n 6.670866154143596","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a more detailed guide of how to compute ground truth conditional distributions please refer to Computing Ground Truth Conditional Distributions.","category":"page"},{"location":"#Wrapping-an-existing-Table-as-a-CausalTable","page":"Home","title":"Wrapping an existing Table as a CausalTable","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have a table of data that you would like to use with CausalTables.jl without defining a corresponding DataGeneratingProcess (i.e. to use with another package, or write your own causal method in Julia) you can wrap it as a CausalTable using the corresponding constructor.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tbl = (W = rand(1:5, 10), X = randn(10), Y = randn(10))\nctbl = CausalTable(tbl; treatment = :X, response = :Y, \n                        causes = (X = [:W], Y = [:W, :X]))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Observe how causes is a NamedTuple of arrays listing the causes of specified variables, forming a partial edgelist of a directed acyclic graph. Labeling the causes of treatment and response is required, but causes of other variables do not need to be labeled; the roles of common causal inference variables, such as confounders, can be determined automatically. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Wrapping data as a CausalTable allows one to use its utility functions to extract causal-relevant variables from the dataset. For instance, you can extract the treatment, response, confounders, mediators, or instruments from the dataset using the corresponding functions. As an example, the following subsets the data to include only confounders:","category":"page"},{"location":"","page":"Home","title":"Home","text":"confounders(ctbl)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a more detailed guide of how to wrap an existing table as a CausalTable please refer to Turning Your Data Into a CausalTable.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Have questions? Spot a bug or issue in the documentation? Want to request a new feature or add one yourself? Please don't hesitate to open an issue or pull request on the CausalTables.jl GitHub repository. We welcome all contributions and feedback!","category":"page"},{"location":"man/api/#CausalTables.jl-Full-API","page":"Full API","title":"CausalTables.jl Full API","text":"","category":"section"},{"location":"man/api/#CausalTables.AllOrderStatistics-man-api","page":"Full API","title":"CausalTables.AllOrderStatistics","text":"AllOrderStatistics <: NetworkSummary\n\nA NetworkSummary which computes all ordered values of the target variable among each unit's connected neighbors in the adjacency matrix.\n\nFields\n\ntarget::Symbol: A key denoting the target variable to be summarized in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the target variable to be summarized in the data attribute of a CausalTable.\nmatrix::Symbol: A key denoting the adjacency matrix over which summary is computed in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the key of the adjacency matrix in the arrays attribute of a CausalTable.\nweights::Union{Symbol, Nothing}: An optional variable by which each unit may be weighted in the summary.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#CausalTables.DataGeneratingProcess-man-api","page":"Full API","title":"CausalTables.DataGeneratingProcess","text":"mutable struct DataGeneratingProcess\n\nA struct representing a data generating process.\n\nFields\n\nnames: An array of symbols representing the names of the variables.\ntypes: An array of symbols representing the types of the variables.\nfuncs: An array of functions representing the generating functions for each variable.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#CausalTables.Friends-man-api","page":"Full API","title":"CausalTables.Friends","text":"mutable struct Friends <: NetworkSummary\n\nA NetworkSummary counting the number of connected individuals in an adjacency matrix, also known as the number of \"friends\".\n\nFields\n\nmatrix::Symbol: A key denoting the adjacency matrix over which summary is computed in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the key of the adjacency matrix in the arrays attribute of a CausalTable.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#CausalTables.KOrderStatistics-man-api","page":"Full API","title":"CausalTables.KOrderStatistics","text":"KOrderStatistics <: NetworkSummary\n\nA NetworkSummary which computes the top K ordered values of the target variable among each unit's connected neighbors in the adjacency matrix.\n\nFields\n\ntarget::Symbol: A key denoting the target variable to be summarized in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the target variable to be summarized in the data attribute of a CausalTable.\nmatrix::Symbol: A key denoting the adjacency matrix over which summary is computed in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the key of the adjacency matrix in the arrays attribute of a CausalTable.\nweights::Union{Symbol, Nothing}: An optional variable by which each unit may be weighted in the summary.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#CausalTables.Mean-man-api","page":"Full API","title":"CausalTables.Mean","text":"Mean <: NetworkSummary\n\nA NetworkSummary which computes the mean of the target variable among each unit connected in the adjacency matrix.\n\nFields\n\ntarget::Symbol: A key denoting the target variable to be summarized in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the target variable to be summarized in the data attribute of a CausalTable.\nmatrix::Symbol: A key denoting the adjacency matrix over which summary is computed in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the key of the adjacency matrix in the arrays attribute of a CausalTable.\nweights::Union{Symbol, Nothing}: An optional variable by which each unit may be weighted in the summary.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#CausalTables.NetworkSummary-man-api","page":"Full API","title":"CausalTables.NetworkSummary","text":"abstract type NetworkSummary\n\nAbstract type representing a summary of a network.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#CausalTables.StructuralCausalModel-man-api","page":"Full API","title":"CausalTables.StructuralCausalModel","text":"struct StructuralCausalModel\n\nA struct representing a structural causal model (SCM). This includes a DataGeneratingProcess \n\nArguments\n\ndgp::DataGeneratingProcess: The data generating process from which random data will be drawn.\ntreatment::Vector{Symbol}: The variables representing the treatment.\nresponse::Vector{Symbol}: The variables representing the response.\ncauses::Union{NamedTuple, Nothing}: A NamedTuple of Vectors labeling the causes of relevant variables in the data-generating process. If nothing, will assume that all variables not contained in treatment or response are common causes of both.\narraynames: Names of auxiliary variables used in the DataGeneratingProcess that are not included as \"tabular\" variables. Most commonly used to denote names of adjacency matrices used to compute summary functions of previous steps. \n\n\n\n\n\n","category":"type"},{"location":"man/api/#CausalTables.Sum-man-api","page":"Full API","title":"CausalTables.Sum","text":"Sum <: NetworkSummary\n\nA NetworkSummary which sums the values of the target variable for each unit connected in the adjacency matrix of a StructuralCausalModel or CausalTable\n\nFields\n\ntarget::Symbol: A key denoting the target variable to be summarized in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the target variable to be summarized in the data attribute of a CausalTable.\nmatrix::Symbol: A key denoting the adjacency matrix over which summary is computed in the DataGeneratingProcess of the StructuralCausalModel; or, alternatively, the key of the adjacency matrix in the arrays attribute of a CausalTable.\nweights::Union{Symbol, Nothing}: An optional variable by which each unit may be weighted in the summary.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Base.rand-Tuple{StructuralCausalModel, Int64}-man-api","page":"Full API","title":"Base.rand","text":"rand(scm::StructuralCausalModel, n::Int)\n\nGenerate random data from a Structural Causal Model (SCM) using the specified number of samples.\n\nArguments\n\nscm::StructuralCausalModel: The Structural Causal Model from which to generate data.\nn::Int: The number of samples to generate.\n\nReturns\n\nA CausalTable object containing the generated data.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Base.replace-Tuple{CausalTable}-man-api","page":"Full API","title":"Base.replace","text":"replace(o::CausalTable; kwargs...)\n\nReplace the fields of a CausalTable object with the provided keyword arguments.\n\nArguments\n\no::CausalTable: The CausalTable object to be replaced.\nkwargs...: Keyword arguments specifying the new values for the fields.\n\nReturns\n\nA new CausalTable object with the specified fields replaced.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.additive_mtp-Tuple{Any}-man-api","page":"Full API","title":"CausalTables.additive_mtp","text":"additive_mtp(δ)\n\nConstructs a function that adds a constant (or constant vector) δ to the treatment variable(s) in a CausalTable object. This function is intended to be used as an argument to ape.\n\nArguments\n\nδ: The \"additive shift\" to be applied to the treatment variable of a CausalTable.\n\nReturns\n\nA function that takes a CausalTable object as input and returns a column table of treatments that have been shifted by δ units.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Normal(L)),\n    Y ~ @.(Normal(A + 2 * L + 1))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\nape(scm, additive_mtp(0.5))\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.adjacency_matrix-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.adjacency_matrix","text":"adjacency_matrix(o::CausalTable)\n\nGenerate the adjacency matrix induced by the summaries and arrays attributes of a CausalTable object. This matrix denotes which units are causally dependent upon one another: an entry of 1 in cell (i,j) indicates that some variable in unit i exhibits a causal relationship to some variable in unit j. \n\nArguments\n\no::CausalTable: The CausalTable object for which the adjacency matrix is to be generated.\n\nReturns\n\nA boolean matrix representing the adjacency relationships in the CausalTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.ape-Tuple{StructuralCausalModel, Function}-man-api","page":"Full API","title":"CausalTables.ape","text":"ape(scm::StructuralCausalModel, intervention::Function; samples = 10^6)\n\nApproximate the average policy effect for a given structural causal model (SCM), along with its efficiency bound. This is also known as the causal effect of a modified treatment policy, and is approximated using Monte Carlo sampling. Note that unless intervention is piecewise smooth invertible, the estimated statistical quantity may not have a causal interpretation; see Haneuse and Rotnizky (2013). Mathematically, this is\n\nE(Y(d(a) - Y(a))\n\nwhere d(a) represents the intervention on the treatment variable(s) A, Y(d(a)) represents the counterfactual Y under treatment d(a), and Y(a) represents the counterfactual outcome under the naturally observed value of treatment. This statistical quantity is approximated using Monte Carlo sampling.\n\nConvenience functions for generating intervention functions include additive_mtp and multiplicative_mtp, which construct functions that respectively add or multiply a constant (or constant vector) to the treatment variable(s). One can also implement their own intervention function; this function must take as input a CausalTable object and return a NamedTuple object with each key indexing a treatment variable that has been modified according to the intervention. Also see cast_matrix_to_table_function for a convenience function for constructing interventions.\n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nintervention::Function: The intervention function to apply to the SCM.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The APE approximation.\n\nExample\n\nusing Distributions\ndgp = CausalTables.@dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Normal(L)),\n    Y ~ @.(Normal(A + 2 * L + 1))\n)\nscm = CausalTables.StructuralCausalModel(dgp, :A, :Y)\nape(scm, additive_mtp(0.5))\nape(scm, multiplicative_mtp(2.0))\n\n# example of a custom intervention function\ncustom_intervention = cast_matrix_to_table_function(x -> exp.(x))\nape(scm, custom_intervention)\n\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.ate-Tuple{StructuralCausalModel}-man-api","page":"Full API","title":"CausalTables.ate","text":"ate(scm::StructuralCausalModel; samples = 10^6)\n\nApproximate the average treatment effect (ATE) for a given structural causal model (SCM), along with its efficiency bound, for a univariate binary treatment. Mathematically, this is\n\nE(Y(1) - Y(0))\n\nwhere Y(a) represents the counterfactual Y had the treatment A been set to a. This statistical quantity is approximated using Monte Carlo sampling.\n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The ATE approximation.\neff_bound: The variance of the counterfactual response, which is equal to the efficiency bound for IID data. If observations are correlated, this may not have a meaningful interpretation.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\nate(scm)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.att-Tuple{StructuralCausalModel}-man-api","page":"Full API","title":"CausalTables.att","text":"att(scm::StructuralCausalModel; samples = 10^6)\n\nApproximate the average treatment effect among the treated (ATT) for a given structural causal model (SCM), along with its efficiency bound, for a univariate binary treatment. Mathematically, this is\n\nE(Y(1) - Y(0) mid A = 1)\n\nwhere Y(a) represents the counterfactual Y had the treatment A been set to a. This statistical quantity is approximated using Monte Carlo sampling.\n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The ATT approximation.\neff_bound: The variance of the counterfactual response, which is equal to the efficiency bound for IID data. If observations are correlated, this may not have a meaningful interpretation.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\natt(scm)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.atu-Tuple{StructuralCausalModel}-man-api","page":"Full API","title":"CausalTables.atu","text":"atu(scm::StructuralCausalModel; samples = 10^6)\n\nApproximate the average treatment effect among the untreated (ATU) for a given structural causal model (SCM), along with its efficiency bound, for a univariate binary treatment. Mathematically, this is\n\nE(Y(1) - Y(0) mid A = 0)\n\nwhere Y(a) represents the counterfactual Y had the treatment A been set to a. This statistical quantity is approximated using Monte Carlo sampling.\n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The ATU approximation.\neff_bound: The variance of the counterfactual response, which is equal to the efficiency bound for IID data. If observations are correlated, this may not have a meaningful interpretation.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\natu(scm)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.cast_matrix_to_table_function-Tuple{Function}-man-api","page":"Full API","title":"CausalTables.cast_matrix_to_table_function","text":"cast_matrix_to_table_function(func::Function)\n\nWraps a given function func that operates on a matrix and returns a new function that operates on a CausalTable object. The returned function converts the CausalTable's treatment matrix to a table, applies func to this matrix, and then converts the result back to a column table with the same header as the original treatment matrix.\n\nArguments\n\nfunc::Function: A function that takes a matrix as input and returns a matrix.\n\nReturns\n\nA function that takes a CausalTable object as input and returns a column table.\n\nExample\n\ncustom_intervention = cast_matrix_to_table_function(x -> exp.(x))\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.cfdiff-Tuple{StructuralCausalModel, Function, Function}-man-api","page":"Full API","title":"CausalTables.cfdiff","text":"cfdiff(scm::StructuralCausalModel, intervention1::Function, intervention2::Function; samples = 10^6)\n\nApproximate the difference between two counterfactual response means – that under intervention1 having been applied to the treatment, and that under intervention2 – for a given structural causal model (SCM), along with its efficiency bound. Mathematically, this is\n\nE(Y(d_1(a)) - Y(d_2(a)))\n\nwhere d_1 and d_2 represent intervention1 and intervention2 being applied on the treatment variable(s) A. This statistical quantity is approximated using Monte Carlo sampling. \n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nintervention1::Function: The first intervention function to be contrasted.\nintervention2::Function: The second intervention function to be contrasted.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The mean difference in counterfactual outcomes.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\ncfdiff(scm, treat_all, treat_none)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.cfmean-Tuple{StructuralCausalModel, Function}-man-api","page":"Full API","title":"CausalTables.cfmean","text":"cfmean(scm::StructuralCausalModel, intervention::Function; samples = 10^6)\n\nApproximate the counterfactual mean of the response had intervention been applied to the treatment, along with its efficiency bound, for a given structural causal model (SCM). Mathematically, this estimand is\n\nE(Y(d(a)))\n\nwhere d(a) represents an intervention on the treatment variable(s) A. This statistical quantity is approximated using Monte Carlo sampling. \n\nArguments\n\nscm::StructuralCausalModel: The SCM from which data is to be simulated.\nintervention::Function: The intervention function to apply to the SCM.\nsamples: The number of samples to draw from scm for Monte Carlo approximation (default is 10^6). This controls the precision of the approximation.\n\nReturns\n\nA named tuple containing:\n\nμ: The mean of the counterfactual outcomes.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\ncfmean(scm, treat_all)\ncfmean(scm, treat_none)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.condensity-Tuple{StructuralCausalModel, CausalTable, Union{String, Symbol}}-man-api","page":"Full API","title":"CausalTables.condensity","text":"condensity(scm::StructuralCausalModel, ct::CausalTable, name::Symbol)\n\nCompute the conditional density of variable name in CausalTable ct that has been drawn from StructuralCausalModel scm.\n\nArguments\n\nscm::StructuralCausalModel: The StructuralCausalModel representing the data generating process.\nct::CausalTable: The CausalTable containing the observed data.\nname::Symbol: The variable for which to compute the conditional density.\n\nReturns\n\nThe conditional density of the variable var given the observed data.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.confoundernames-Tuple{CausalTable, Symbol, Symbol}-man-api","page":"Full API","title":"CausalTables.confoundernames","text":"confoundernames(o::CausalTable, x::Symbol, y::Symbol)\n\nOutputs the names of the confounders of the causal relationship between x and y from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the confounder names.\nx::Symbol, y::Symbol: The two variables whose confounders should be selected.\n\nReturns\n\nA Vector of Symbols containing the names of the confounders between x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.confoundernames-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.confoundernames","text":"confoundernames(o::CausalTable)\n\nOutputs the confounder names of each response-treatment pair from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the confounder names of each treatment-response pair.\n\nReturns\n\nA matrix of Vectors containing the confounder names of each treatment-response pair.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.confounders-Tuple{CausalTable, Symbol, Symbol}-man-api","page":"Full API","title":"CausalTables.confounders","text":"confounders(o::CausalTable, x::Symbol, y::Symbol)\n\nSelects the common causes for a specific pair of variables (x,y) from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the confounders.\nx::Symbol, y::Symbol: The two variables whose confounders should be selected.\n\nReturns\n\nA new CausalTable containing only the confounders of both x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.confounders-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.confounders","text":"confounders(o::CausalTable; collapse_parents = true)\n\nSelects the confounders of each response-treatment pair from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the confounder variables of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single CausalTable object if there is either only one treatment-response pair or all pair share the same set of confounders. Defaults to true.\n\nReturns\n\nA new CausalTable containing only the confounders (if a single response, or all responses share the same set of causes); otherwise, a Matrix of CausalTable objects containing the confounders of each treatment-response pair, where rows represent responses and columns represent treatments.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.confoundersmatrix-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.confoundersmatrix","text":"confoundersmatrix(o::CausalTable; collapse_parents = true)\n\nOutputs the treatment-variable confounders from the given CausalTable object as a matrix (or matrix of matrices, if multiple treatment-response pairs are present).\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the confounders of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single Matrix object if there is either only one treatment-response pair or all pair share the same set of confounders. Defaults to true.\n\nReturns\n\nA matrix containing only the confounders.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.conmean-Tuple{StructuralCausalModel, CausalTable, Union{String, Symbol}}-man-api","page":"Full API","title":"CausalTables.conmean","text":"conmean(scm::StructuralCausalModel, ct::CausalTable, name::Symbol)\n\nCompute the conditional mean of variable name in CausalTable ct that has been drawn from StructuralCausalModel scm.\n\nArguments\n\nscm::StructuralCausalModel: The StructuralCausalModel object representing the data generating process.\nct::CausalTable: The CausalTable object representing the data.\nname::Symbol: The variable for which to compute the conditional mean.\n\nReturns\n\nAn array of conditional means for the specified variable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.convar-Tuple{StructuralCausalModel, CausalTable, Union{String, Symbol}}-man-api","page":"Full API","title":"CausalTables.convar","text":"convar(scm::StructuralCausalModel, ct::CausalTable, name::Symbol)\n\nCompute the conditional variance of variable name in CausalTable ct that has been drawn from StructuralCausalModel scm.\n\nArguments\n\nscm::StructuralCausalModel: The StructuralCausalModel object representing the data generating process.\nct::CausalTable: The CausalTable object representing the data.\nname::Symbol: The variable for which to compute the conditional mean.\n\nReturns\n\nAn array of conditional variances for the specified variable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.convolve-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T<:(Distributions.UnivariateDistribution)-man-api","page":"Full API","title":"CausalTables.convolve","text":"convolve(ds::Vector{T}) where {T <: UnivariateDistribution}\n\nA convolve function that works on a vector of UnivariateDistribution.\n\nArguments\n\nds::Vector{T}: A vector of UnivariateDistribution objects.\n\nReturns\n\noutput: The result of convolving all the distributions in ds. If ds is empty, will return Binomial(0, 0.5) denoting a point mass at 0.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.data-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.data","text":"data(o::CausalTable)\n\nRetrieve the data stored in a CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable from which to retrieve the data.\n\nReturns\n\nThe data stored in the CausalTable object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.dependency_matrix-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.dependency_matrix","text":"dependency_matrix(o::CausalTable)\n\nGenerate the dependency matrix induced by the summaries and arrays attributes of a CausalTable object. This matrix stores which units are statistically dependent upon one another: an entry of 1 in cell (i,j) indicates that the data of unit i is correlated with the data in unit j. Two units are correlated if they either are causally dependent (neighbors in the adjacency matrix) or share a common cause (share a neighbor in the adjacency matrix).\n\nArguments\n\no::CausalTable: The CausalTable object for which the dependency matrix is to be generated.\n\nReturns\n\nA boolean matrix representing the  relationships in the CausalTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.draw_counterfactual-Tuple{StructuralCausalModel, CausalTable, Function}-man-api","page":"Full API","title":"CausalTables.draw_counterfactual","text":"draw_counterfactual(scm::StructuralCausalModel, parents::CausalTable, intervention::Function) -> Vector\n\nGenerate counterfactual responses based on a given structural causal model (SCM), a table of response parents, and an intervention function. That is, sample the responses that would have occurred had some intervention been applied to the treatment specified by the structural causal model.\n\nArguments\n\nscm::StructuralCausalModel: The structural causal model used to generate counterfactual outcomes.\nparents::CausalTable: A table containing the variables causally preceding the response variable.\nintervention::Function: A function that defines the intervention to be applied to the parent variables. Use cast_matrix_to_table_function to convert a function acting on a treatment vector or matrix to a function that acts on a CausalTable.\n\nReturns\n\nA vector of counterfactual responses.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.instrumentnames-Tuple{CausalTable, Symbol, Symbol}-man-api","page":"Full API","title":"CausalTables.instrumentnames","text":"instrumentnames(o::CausalTable, x::Symbol, y::Symbol)\n\nOutputs the names of the instruments of the causal relationship between x and y from the given CausalTable object; that is, variables that are associated with x but do not cause y.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediator names.\nx::Symbol, y::Symbol: The two variables whose mediators should be selected.\n\nReturns\n\nA Vector of Symbols containing the names of the mediators between x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.instrumentnames-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.instrumentnames","text":"instrumentnames(o::CausalTable)\n\nOutputs the instrument names of each treatment-response pair from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the instrument names of each treatment-response pair.\n\nReturns\n\nA matrix of Vectors containing the instrument names of each treatment-response pair.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.instruments-Tuple{CausalTable, Symbol, Symbol}-man-api","page":"Full API","title":"CausalTables.instruments","text":"instruments(o::CausalTable, x::Symbol, y::Symbol)\n\nSelects the instruments for a specific pair of variables (x,y) from the given CausalTable object; that is, variables that are associated with x but do not cause y.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the instruments.\nx::Symbol, y::Symbol: The two variables whose instruments should be selected.\n\nReturns\n\nA new CausalTable containing only the instruments of both x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.instruments-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.instruments","text":"instruments(o::CausalTable; collapse_parents = true)\n\nSelects the instruments of each treatment-response pair from the given CausalTable object; that is, variables that are associated with the treatment but do not cause the response.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the instrumental variables of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single CausalTable object if there is either only one treatment-response pair or all pair share the same set of instruments. Defaults to true.\n\nReturns\n\nA new CausalTable containing only the instruments (if a single response, or all responses share the same set of instruments); otherwise, a Matrix of CausalTable objects containing the instruments of each treatment-response pair, where rows represent responses and columns represent treatments.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.instrumentsmatrix-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.instrumentsmatrix","text":"instrumentsmatrix(o::CausalTable; collapse_parents = true)\n\nOutputs the treatment-variable instruments from the given CausalTable object as a matrix (or matrix of matrices, if multiple treatment-response pairs are present).\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the instruments of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single Matrix object if there is either only one treatment-response pair or all pair share the same set of instruments. Defaults to true.\n\nReturns\n\nA matrix containing only the confounders.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.intervene-Tuple{CausalTable, Function}-man-api","page":"Full API","title":"CausalTables.intervene","text":"intervene(ct::CausalTable, intervention::Function)\n\nApplies intervention to the treatment vector(s) within a CausalTable, and outputs a new CausalTable with the intervened treatment.\n\nArguments\n\nct::CausalTable: The data on which treatment should be intervened\nintervention::Function: A function that defines the intervention to be applied to the parent variables. Use cast_matrix_to_table_function to convert a function acting on a treatment vector or matrix to a function that acts on a CausalTable.\n\nReturns\n\nA CausalTable containing the same data as ct, but with the treatment variable(s) modified accoding to intervention\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\nct = rand(scm, 100)\nintervene(ct, treat_all)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.mediatornames-Tuple{CausalTable, Symbol, Symbol}-man-api","page":"Full API","title":"CausalTables.mediatornames","text":"mediatornames(o::CausalTable, x::Symbol, y::Symbol)\n\nOutputs the names of the mediators of the causal relationship between x and y from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediator names.\nx::Symbol, y::Symbol: The two variables whose mediators should be selected.\n\nReturns\n\nA Vector of Symbols containing the names of the mediators between x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.mediatornames-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.mediatornames","text":"mediatornames(o::CausalTable)\n\nOutputs the mediator names of each response-treatment pair from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediator names of each treatment-response pair.\n\nReturns\n\nA matrix of Vectors containing the mediator names of each treatment-response pair.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.mediators-Tuple{CausalTable, Symbol, Symbol}-man-api","page":"Full API","title":"CausalTables.mediators","text":"mediators(o::CausalTable, x::Symbol, y::Symbol)\n\nSelects the mediators for a specific pair of variables (x,y) from the given CausalTable object; that is, the variables that are caused by x and cause y.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediators.\nx::Symbol, y::Symbol: The two variables whose mediators should be selected.\n\nReturns\n\nA new CausalTable containing only the mediators of both x and y.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.mediators-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.mediators","text":"mediators(o::CausalTable; collapse_parents = true)\n\nSelects the mediators of each treatment-response pair from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediator variables of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single CausalTable object if there is either only one treatment-response pair or all pair share the same set of mediators. Defaults to true.\n\nReturns\n\nA new CausalTable containing only the mediators (if a single response, or all responses share the same set of mediators); otherwise, a Matrix of CausalTable objects containing the mediators of each treatment-response pair, where rows represent responses and columns represent treatments.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.mediatorsmatrix-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.mediatorsmatrix","text":"mediatorsmatrix(o::CausalTable; collapse_parents = true)\n\nOutputs the treatment-variable confounders from the given CausalTable object as a matrix (or matrix of matrices, if multiple treatment-response pairs are present).\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the mediators of each treatment-response pair.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single Matrix object if there is either only one treatment-response pair or all pair share the same set of mediators. Defaults to true.\n\nReturns\n\nA matrix containing only the confounders.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.multiplicative_mtp-Tuple{Any}-man-api","page":"Full API","title":"CausalTables.multiplicative_mtp","text":"multiplicative_mtp(δ)\n\nConstructs a function that scales the treatment variable(s) in a CausalTable object by a constant δ. This function is intended to be used as an argument to ape.\n\nArguments\n\nδ: The \"multiplicative shift\" to be applied to the treatment variable of a CausalTable.\n\nReturns\n\nA function that takes a CausalTable object as input and returns a column table of treatments that have been scaled by δ units.\n\nExample\n\nusing Distributions\ndgp = CausalTables.@dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Normal(L)),\n    Y ~ @.(Normal(A + 2 * L + 1))\n)\nscm = CausalTables.StructuralCausalModel(dgp, :A, :Y)\nape(scm, multiplicative_mtp(2.0))\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.parents-Tuple{CausalTable, Symbol}-man-api","page":"Full API","title":"CausalTables.parents","text":"parents(o::CausalTable, symbol)\n\nSelects the variables that precede symbol causally from the CausalTable o, based on the causes attribute. Note that if symbol is not contained within o.causes, this function will output an empty CausalTable.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the parent variables of symbol.\nsymbol: The variable for which to extract the parent variables.\n\nReturns\n\nA new CausalTable containing only the parents of symbol\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.propensity-Tuple{StructuralCausalModel, CausalTable, Union{String, Symbol}}-man-api","page":"Full API","title":"CausalTables.propensity","text":"propensity(scm::StructuralCausalModel, ct::CausalTable, name::Symbol)\n\nCompute the (generalized) propensity score of variable name in CausalTable ct that has been drawn from StructuralCausalModel scm.\n\nArguments\n\nscm::StructuralCausalModel: The StructuralCausalModel object representing the data generating process.\nct::CausalTable: The CausalTable object representing the data.\nname::Symbol: The variable for which to compute the conditional mean.\n\nReturns\n\nAn array of conditional probabilities for the specified variable (or densities, if the specified variable is continuous).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.reject-Tuple{CausalTable, Symbol}-man-api","page":"Full API","title":"CausalTables.reject","text":"reject(o::CausalTable, symbols)\n\nRemoves the columns specified by symbols from the CausalTable object o.\n\nArguments\n\no::CausalTable: The CausalTable object from which symbols will be rejected.\nsymbols: A collection of symbols to be rejected from the CausalTable.\n\nReturns\n\nA new CausalTable object with the specified symbols removed from its data.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.response-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.response","text":"response(o::CausalTable)\n\nSelects the response column(s) from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to select the response column(s).\n\nReturns\n\nA new CausalTable containing only the response column(s).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.responsematrix-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.responsematrix","text":"responsematrix(o::CausalTable)\n\nOutputs the response column(s) from the given CausalTable object as a matrix.\n\nArguments\n\no::CausalTable: The CausalTable object from which to select the response column(s).\n\nReturns\n\nA matrix containing only the response column(s)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.responseparents-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.responseparents","text":"responseparents(o::CausalTable)\n\nSelects the parents of each response variable from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the parent variables of each response.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single CausalTable object if there is either only one response or all response have the same parents. Defaults to true.\n\nReturns\n\nA new CausalTable containing only the causes of the responses (if a single response, or all responses share the same set of causes); otherwise, a Vector of CausalTable objects containing the causes of each response.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.select-Tuple{CausalTable, Symbol}-man-api","page":"Full API","title":"CausalTables.select","text":"select(o::CausalTable, symbols)\n\nSelects specified columns from a CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which columns are to be selected.\nsymbols: A list of symbols representing the columns to be selected.\n\nReturns\n\nA new CausalTable object with only the selected columns.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.set_treatment_value-Tuple{CausalTable, Any}-man-api","page":"Full API","title":"CausalTables.set_treatment_value","text":"set_treatment_value(ct::CausalTable, value)\n\nSets all treatments present in the data of a CausalTable to a specified value. This function is primarily used for interventions where the treatment value is set to a constant, such as in the case of binary treatments.\n\nArguments\n\nct::CausalTable: The causal table object containing treatment information and data.\nvalue: A value intended to represent the treatment value to set.\n\nReturns\n\nNamedTuple: A named tuple mapping each treatment variable to a vector of ones.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.summarize-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.summarize","text":"summarize(o::CausalTable)\n\nSummarizes the data in a CausalTable object according to the NetworkSummary objects stored in its summaries attribute.\n\nArguments\n\no::CausalTable: The CausalTable object to be summarized.\n\nReturns\n\nA new CausalTable object with the original data merged with the summarized data.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.treat_all-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.treat_all","text":"treat_all(ct::CausalTable)\n\nIntervenes on a CausalTable object by setting all treatment variables to 1.\n\nArguments\n\nct::CausalTable: A CausalTable object with a univariate binary treatment.\n\nReturns\n\nA NamedTuple object with the same header as the treatment matrix in ct, where each treatment variable is set to 1.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\ndata = rand(scm, 100)\ntreat_all(data)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.treat_none-Tuple{Any}-man-api","page":"Full API","title":"CausalTables.treat_none","text":"treat_none(ct::CausalTable)\n\nIntervenes on a CausalTable object by setting all treatment variables to 0.\n\nArguments\n\nct::CausalTable: A CausalTable object with a univariate binary treatment.\n\nReturns\n\nA NamedTuple object with the same header as the treatment matrix in ct, where each treatment variable is set to 0.\n\nExample\n\nusing Distributions\ndgp = @dgp(\n    L ~ Beta(2, 4),\n    A ~ @.(Bernoulli(L)),\n    Y ~ @.(Normal(A + L))\n)\nscm = StructuralCausalModel(dgp, :A, :Y)\ndata = rand(scm, 100)\ntreat_none(data)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.treatment-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.treatment","text":"treatment(o::CausalTable)\n\nSelects the treatment column(s) from the given CausalTable object. treatment\n\nArguments\n\no::CausalTable: The CausalTable object from which to select the treatment column(s).\n\nReturns\n\nA new CausalTable containing only the treatment column(s)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.treatmentmatrix-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.treatmentmatrix","text":"treatmentmatrix(o::CausalTable)\n\nOutputs the treatment column(s) from the given CausalTable object as a matrix.\n\nArguments\n\no::CausalTable: The CausalTable object from which to select the treatment column(s).\n\nReturns\n\nA matrix containing only the treatment column(s)\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.treatmentparents-Tuple{CausalTable}-man-api","page":"Full API","title":"CausalTables.treatmentparents","text":"treatmentparents(o::CausalTable)\n\nSelects the parents of each treatment variable from the given CausalTable object.\n\nArguments\n\no::CausalTable: The CausalTable object from which to extract the parent variables of each treatment.\ncollape_parents::Bool: Optional parameter, whether to collapse the output to a single CausalTable object if there is either only one treatment or all treatments have the same parents. Defaults to true.\n\nReturns\n\nA new CausalTable containing only the causes of the treatment (if a single treatment, or all treatments share the same set of causes); otherwise, a Vector of CausalTable objects containing the causes of each treatment.\n\n\n\n\n\n","category":"method"}]
}
