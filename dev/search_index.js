var documenterSearchIndex = {"docs":
[{"location":"man/getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"man/network-summaries/#Network-Summaries","page":"Network Summaries","title":"Network Summaries","text":"","category":"section"},{"location":"man/ground-truth/#Computing-Ground-Truth-Conditional-Distributions","page":"Computing Ground Truth of Causal Parameters","title":"Computing Ground Truth Conditional Distributions","text":"","category":"section"},{"location":"man/generating-data/#Generating-Data-for-Statistical-Experiments","page":"Generating Data for Statistical Experiments","title":"Generating Data for Statistical Experiments","text":"","category":"section"},{"location":"man/formatting/#Turning-Your-Data-Into-a-CausalTable","page":"Turning data into a CausalTable","title":"Turning Your Data Into a CausalTable","text":"","category":"section"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"One of the main purposes of CausalTables.jl is to wrap a Table of data in Julia in order to provide it as input to some other causal inference package. Given a Table of some data, we can turn it into a CausalTable by specifying the treatment, response, and control variables. The code below demonstrates this on the Titanic dataset. This could be, for example, to use as input into some estimator of whether a passenger's sex caused them to survive the Titanic disaster, controlling for some baselineline covariates listed in controls.","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"using CausalTables\nusing MLDatasets: Titanic\nusing DataFrames\n\ndf = Titanic().dataframe\n\n# Wrapping the dataset in a CausalTable\nctbl = CausalTable(df; treatment = :Sex, response = :Survived, controls = [:Pclass, :Age, :SibSp]);\nnothing # hide\n# output","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"The code above assumes that each unit (row in the Table, in this case df), is \"causally independent\" of every other unit – that is, the treatment of one unit does not affect the response of any other unit. In some cases, however, we might work with data in which units may not be causally independent, but rather, in which one unit's variables could dependent on some summary function of its neighbors. ","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"In this case, we can specify a graph argument to the CausalTable constructor, a Graph object from Graphs.jl which will be used to determine which units are neighbors of one another. We would also specify a summaries argument, a NamedTuple of NetworkSummary objects representing variables summarized over each unit's neighbors in the graph. More detail on the types of NetworkSummary that can be used in a dependent-data CausalTable can be found in Network Summaries","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"Here's an example of how such a CausalTable might be constructed, using the Karate Club dataset. Treatment is defined as the number of friends a club member has, denoted by the summary function parameter summaries = (friends = Friends(),). ","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"using CausalTables\nusing MLDatasets\nusing Graphs\n\n# Get a Table of Karate Club data from MLDatasets\ndata = KarateClub()\ntbl = data.graphs[1].node_data\n\n# Convert the karate club data into a Graphs.jl graph object\ng = SimpleGraphFromIterator([Edge(x...) for x in zip(data.graphs[1].edge_index...)])\n\n# Note that the input to summaries must be a NamedTuple, even if there is only one summary variable, so the trailing comma is necessary.\nctbl = CausalTable(tbl; graph = g, treatment = :friends, response = :labels_clubs, summaries = (friends = Friends(),));\nnothing # hide\n# output","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"Be warned: if you try to call gettreatment on a CausalTable that has not been summarized, you will get an error:","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"gettreatment(ctbl)\n\n# output\nERROR: Treatment variable not contained in the data. Note: If response is a summary over a network (contained within tbl.summaries), make sure that you call `summary(tbl::CausalTable)` on your table before calling `gettreatment`.","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"If you wish to extract the treatment variable, you will first need to call summarize on the CausalTable object, which computes the summary variables over the network. Then, calling gettreatment will yield the summarized treatment variable, like so:","category":"page"},{"location":"man/formatting/","page":"Turning data into a CausalTable","title":"Turning data into a CausalTable","text":"ctbl_summarized = summarize(ctbl)\ngettreatment(ctbl_summarized);\nnothing # hide\n# output","category":"page"},{"location":"#CausalTables.jl","page":"Home","title":"CausalTables.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for storing and simulating data for causal inference in Julia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CausalTables.jl can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg> add CausalTables","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CausalTables.jl has three main functionalities:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Generating simulation data using a DataGeneratingProcess\nComputing \"ground truth\" conditional distributions, means, and other functionals from a DataGeneratingProcess and a CausalTable\nWrapping an existing Table to make it a CausalTable for use by external packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The examples below illustrate each of these three functionalities.","category":"page"},{"location":"#Simulating-Data-from-a-DataGeneratingProcess","page":"Home","title":"Simulating Data from a DataGeneratingProcess","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To set up a statistical simulation using CausalTables.jl, we first define a DataGeneratingProcess (DGP). The easiest way to do this is using the @dgp macro, which takes a sequence of conditional distributions of the form [variable name] ~ Distribution(args...) and returns a DataGeneratingProcess object like so:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using CausalTables\nusing Random\n\ndistributions = @dgp(\n        W ~ DiscreteUniform(1, 5),\n        X ~ (@. Normal(:W, 1)),\n        Y ~ (@. Normal(:X + 0.2 * :W, 1))\n    )\n\ndgp = DataGeneratingProcess(\n    distributions;\n    treatment = :X,\n    response = :Y,\n    controls = [:W]\n)\nnothing # hide\n# output","category":"page"},{"location":"","page":"Home","title":"Home","text":"One we've defined our list of distribution functions, we can generate data from the DGP using the rand function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Random.seed!(1);\ndata = rand(dgp, 5)\n\n# output\nCausalTable((W = [1, 2, 4, 4, 5], X = [1.267564418628885, 3.749933692528245, 3.1739792080807026, 2.957247582108903, 4.670866154143596], Y = [0.9853125032197694, 5.332176395928403, 4.454670622625683, 3.7546894015545953, 7.105478705857513]), :X, :Y, [:W], Graphs.SimpleGraphs.SimpleGraph{Int64}(0, Vector{Int64}[]), NamedTuple())","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a more detailed guide of how to generate data please refer to Generating Data.","category":"page"},{"location":"#Computing-Ground-Truth-Conditional-Distributions","page":"Home","title":"Computing Ground Truth Conditional Distributions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Once we've defined a DGP and have some table of data with variables matching those of our DGP, we can compute the ground truth conditional distributions of any variable in a CausalTable (given a corresponding DGP) using the condensity function. This returns a Distribution object from the package Distributions.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"X_distribution = condensity(dgp, data, :X)\n\n# output\n5-element Vector{Distributions.Normal{Float64}}:\n Distributions.Normal{Float64}(μ=1.0, σ=1.0)\n Distributions.Normal{Float64}(μ=2.0, σ=1.0)\n Distributions.Normal{Float64}(μ=4.0, σ=1.0)\n Distributions.Normal{Float64}(μ=4.0, σ=1.0)\n Distributions.Normal{Float64}(μ=5.0, σ=1.0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For convenience, there also exists a conmean function that extracts the true conditional mean of a specific variable the CausalTable:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Y_mean = conmean(dgp, data, :Y)\n\n# output\n5-element Vector{Float64}:\n 1.467564418628885\n 4.149933692528245\n 3.973979208080703\n 3.757247582108903\n 5.670866154143596","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a more detailed guide of how to compute ground truth conditional distributions please refer to Computing Ground Truth Conditional Distributions.","category":"page"},{"location":"#Wrapping-an-existing-Table-as-a-CausalTable","page":"Home","title":"Wrapping an existing Table as a CausalTable","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have a table of data that you would like to use with CausalTables.jl without defining a corresponding DataGeneratingProcess (i.e. to use with another package) you can wrap it as a CausalTable using the corresponding constructor:","category":"page"},{"location":"","page":"Home","title":"Home","text":"tbl = (W = rand(1:5, 10), X = randn(10), Y = randn(10))\nctbl = CausalTable(tbl; treatment = :X, response = :Y, controls = [:W])\n\n# output\nCausalTable((W = [4, 1, 1, 2, 1, 3, 4, 2, 5, 3], X = [0.8368780076380373, 0.7625987122922915, 1.3399028099332886, 0.3933244983292907, 0.7182246880278974, 1.7429555866643915, 1.567984839687284, -0.003792715523756588, -1.6907757555898597, -2.406519455680792], Y = [-0.2942279070703944, -0.6668265580083714, 0.16560721534408443, -0.5052374899783175, 0.46175632905790776, -0.8915708334578072, -0.7643361560895672, -1.4725034534957362, -0.5066603365693706, -2.103326596494467]), :X, :Y, [:W], Graphs.SimpleGraphs.SimpleGraph{Int64}(0, Vector{Int64}[]), NamedTuple())","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a more detailed guide of how to wrap an existing table as a CausalTable please refer to Turning Your Data Into a CausalTable.","category":"page"},{"location":"man/api/","page":"-","title":"-","text":"Modules = [CausalTables]\nOrder   = [:function, :type]","category":"page"},{"location":"man/api/#Base.rand-Tuple{DataGeneratingProcess, Int64}","page":"-","title":"Base.rand","text":"rand(dgp::DataGeneratingProcess, n::Int)\n\nGenerate a random CausalTable using the specified DataGeneratingProcess.\n\nArguments\n\ndgp::DataGeneratingProcess: The DataGeneratingProcess object defining the causal network and distribution steps.\nn::Int: The number of observations to generate.\n\nReturns\n\nct::CausalTable: The generated CausalTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.condensity-Tuple{DataGeneratingProcess, CausalTable, Symbol}","page":"-","title":"CausalTables.condensity","text":"condensity(dgp::DataGeneratingProcess, ct::CausalTable, var::Symbol)\n\nCompute the conditional density of a variable in a CausalTable based on a DataGeneratingProcess.\n\nArguments\n\ndgp::DataGeneratingProcess: The DataGeneratingProcess object representing the data generating process.\nct::CausalTable: The CausalTable object containing the data.\nvar::Symbol: The name of the variable for which to compute the conditional density.\n\nReturns\n\nThe conditional density of the variable in the CausalTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.conmean-Tuple{DataGeneratingProcess, CausalTable, Symbol}","page":"-","title":"CausalTables.conmean","text":"conmean(dgp::DataGeneratingProcess, ct::CausalTable, var::Symbol)\n\nCompute the conditional mean of a variable in a CausalTable based on a DataGeneratingProcess.\n\nArguments\n\ndgp::DataGeneratingProcess: The DataGeneratingProcess object representing the data generating process.\nct::CausalTable: The CausalTable object representing the data.\nvar::Symbol: The variable for which to compute the conditional mean.\n\nReturns\n\nAn array of conditional means for the specified variable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.getcontrols-Tuple{CausalTable}","page":"-","title":"CausalTables.getcontrols","text":"getcontrols(x::CausalTable)\n\nSelects the control variables from the given CausalTable object x.\n\nArguments\n\nx::CausalTable: The CausalTable object from which to select the control variables.\nkeepcausal::Bool: Determines whether to keep the CausalTable wrapping or return a NamedTuple. Default is true.\n\nReturns\n\nA new CausalTable object containing only the control variables.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.getgraph-Tuple{CausalTable}","page":"-","title":"CausalTables.getgraph","text":"getgraph(x::CausalTable)\n\nGet the graph associated with a CausalTable.\n\nArguments\n\nx::CausalTable: The CausalTable object.\n\nReturns\n\nThe graph associated with the CausalTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.getresponse-Tuple{CausalTable}","page":"-","title":"CausalTables.getresponse","text":"getresponse(x::CausalTable)\n\nGet the response variable from a CausalTable.\n\nArguments\n\nx::CausalTable: The CausalTable object.\n\nReturns\n\nThe response variable from the CausalTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.getsummaries-Tuple{CausalTable}","page":"-","title":"CausalTables.getsummaries","text":"getsummaries(x::CausalTable)\n\nArguments\n\nx::CausalTable: The CausalTable object.\n\nReturns\n\nAn array of tables stored in the CausalTable x.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.gettable-Tuple{CausalTable}","page":"-","title":"CausalTables.gettable","text":"gettable(x::CausalTable)\n\nExtracts the underlying table from a CausalTable.\n\nArguments\n\nx::CausalTable: The CausalTable object.\n\nReturns\n\nThe underlying table.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.gettreatment-Tuple{CausalTable}","page":"-","title":"CausalTables.gettreatment","text":"gettreatment(x::CausalTable)\n\nGet the treatment column from a CausalTable.\n\nArguments\n\nx::CausalTable: The CausalTable object.\n\nReturns\n\nThe treatment column of the CausalTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.replace-Tuple{CausalTable}","page":"-","title":"CausalTables.replace","text":"replace(x::CausalTable; tbl = nothing, treatment = nothing, response = nothing, controls = nothing, graph = nothing, summaries = nothing)\n\nConviently replace several components of a CausalTable with new values.\n\nArguments:\n\nx::CausalTable: The CausalTable object to modify.\ntbl: The new table to replace the existing table. If nothing, the current table is used.\ntreatment: The new treatment symbol to replace the existing treatment symbol. If nothing, the current treatment symbol is used.\nresponse: The new response symbol to replace the existing response symbol. If nothing, the current response symbol is used.\ncontrols: The new control symbols to replace the existing control symbols. If nothing, the current control symbols are used.\ngraph: The new graph to replace the existing graph. If nothing, the current graph is used.\nsummaries: The new summaries to replace the existing summaries. If nothing, the current summaries are used.\n\nReturns:\n\nCausalTable: The modified CausalTable object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.replacetable-Tuple{CausalTable, Any}","page":"-","title":"CausalTables.replacetable","text":"replacetable(x::CausalTable, tbl)\n\nConveniently replace the underlying table of a CausalTable with a new table.\n\nArguments\n\nx::CausalTable: The CausalTable object to replace the table for.\ntbl: The new table to replace the existing table with.\n\nReturns\n\nA new CausalTable object with the updated table.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.setcausalvars!-Tuple{CausalTable}","page":"-","title":"CausalTables.setcausalvars!","text":"setcausalvars!(x::CausalTable; treatment=nothing, response=nothing, controls=nothing)\n\nConvenience function for setting new treatment, response, and controls variables for a CausalTable at once.\n\nArguments:\n\nx::CausalTable: The CausalTable object.\ntreatment=nothing: The treatment variable.\nresponse=nothing: The response variable.\ncontrols=nothing: The control variables.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.setcontrols!-Tuple{CausalTable, Vector{Symbol}}","page":"-","title":"CausalTables.setcontrols!","text":"setcontrols!(x::CausalTable, controls::Vector{Symbol})\n\nSet the control variables for a CausalTable.\n\nArguments\n\nx::CausalTable: The CausalTable object.\ncontrols::Vector{Symbol}: The new control variables to be set.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.setresponse!-Tuple{CausalTable, Symbol}","page":"-","title":"CausalTables.setresponse!","text":"setresponse!(x::CausalTable, response::Symbol)\n\nSet the response variable for a CausalTable.\n\nArguments\n\nx::CausalTable: The CausalTable object.\nresponse::Symbol: The symbol representing the new response variable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.settreatment!-Tuple{CausalTable, Symbol}","page":"-","title":"CausalTables.settreatment!","text":"settreatment!(x::CausalTable, treatment::Symbol)\n\nSet the treatment variable for a CausalTable.\n\nArguments\n\nx::CausalTable: The CausalTable object.\ntreatment::Symbol: The symbol representing the new treatment variable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.summarize","page":"-","title":"CausalTables.summarize","text":"summarize(x::CausalTable, keep = true)\n\nSummarize a CausalTable by merging its columns, treatment, response, graph, and summaries.\n\nArguments:\n\nx::CausalTable: The CausalTable to be summarized.\nkeep::Bool: Determines whether to keep the original CausalTable or return a new summarized CausalTable. Default is true.\n\nReturns:\n\nIf keep is true, a new CausalTable with merged columns, treatment, response, graph, and summaries.\nIf keep is false, a NamedTuple with summaries as keys and the corresponding summarized CausalTable as values.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#Distributions.convolve-Union{Tuple{Vector{T}}, Tuple{T}} where T<:(Distributions.UnivariateDistribution)","page":"-","title":"Distributions.convolve","text":"Distributions.convolve(ds::Vector{T}) where {T <: UnivariateDistribution}\n\nOverload the convolve function to work on a vector of UnivariateDistribution.\n\nArguments\n\nds::Vector{T}: A vector of UnivariateDistribution objects.\n\nReturns\n\noutput: The result of convolving all the distributions in ds.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Tables.subset-Tuple{CausalTable, Any}","page":"-","title":"Tables.subset","text":"subset(x::CausalTable, ind)\n\nSubset a CausalTable x based on the given indices ind. Note that viewhinting is not supported; this function will return a copy of the CausalTable.\n\nArguments\n\nx: The CausalTable to be subsetted.\nind: The indices to subset the table and graph.\n\nReturns\n\nA new CausalTable with the subsetted table. If the graph attribute is not Nothing, then this function takes the subgraph induced by the subsetted indices using induced\n\n\n\n\n\n","category":"method"},{"location":"man/api/#CausalTables.CausalTable","page":"-","title":"CausalTables.CausalTable","text":"CausalTable\n\nA mutable structure that contains a table (tbl), a graph (graph), and a named tuple of summaries (summaries).\n\n\n\n\n\n","category":"type"},{"location":"man/api/#CausalTables.DataGeneratingProcess","page":"-","title":"CausalTables.DataGeneratingProcess","text":"struct DataGeneratingProcess\n\nA mutable struct representing a data generating process.\n\nFields\n\nnetworkgen::Function: A function that generates the network structure.\ndistgen::Vector{Pair{Symbol, ValidDGPTypes}}: A vector of pairs representing the distribution generators for each variable.\ntreatment::Symbol: The symbol representing the treatment variable.\nresponse::Symbol: The symbol representing the response variable.\ncontrols::Vector{Symbol}: A vector of symbols representing the control variables.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#CausalTables.NeighborSum","page":"-","title":"CausalTables.NeighborSum","text":"abstract type NeighborSum <: NetworkSummary\n\nStruct representing a summary of neighbor variables.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#CausalTables.NetworkSummary","page":"-","title":"CausalTables.NetworkSummary","text":"abstract type NetworkSummary\n\nAbstract type representing a summary of a network.\n\n\n\n\n\n","category":"type"}]
}
